/**
	* \file VecWdbeVCall.cpp
	* vector VecWdbeVCall (implementation)
	* \author Alexander Wirthmueller
	* \date created: 23 Aug 2020
	* \date modified: 23 Aug 2020
	*/

#include "VecWdbeVCall.h"

using namespace std;
using namespace Sbecore;
using namespace Xmlio;

/******************************************************************************
 namespace VecWdbeVCall
 ******************************************************************************/

uint VecWdbeVCall::getIx(
			const string& sref
		) {
	string s = StrMod::lc(sref);

	if (s == "callwdbebnk.unt.insbs") return CALLWDBEBNK_UNT_INSBS;
	if (s == "callwdbebnk.unteq") return CALLWDBEBNK_UNTEQ;
	if (s == "callwdbebnkmod") return CALLWDBEBNKMOD;
	if (s == "callwdbebnkmod.unteq") return CALLWDBEBNKMOD_UNTEQ;
	if (s == "callwdbebnkupd.refeq") return CALLWDBEBNKUPD_REFEQ;
	if (s == "callwdbeboolvalpreset") return CALLWDBEBOOLVALPRESET;
	if (s == "callwdbeclaimchg") return CALLWDBECLAIMCHG;
	if (s == "callwdbecmd.reteq") return CALLWDBECMD_RETEQ;
	if (s == "callwdbecmd.reu.insbs") return CALLWDBECMD_REU_INSBS;
	if (s == "callwdbecmd.reu.mdl.insbs") return CALLWDBECMD_REU_MDL_INSBS;
	if (s == "callwdbecmd.reueq") return CALLWDBECMD_REUEQ;
	if (s == "callwdbecmdaipamod.cmdeq") return CALLWDBECMDAIPAMOD_CMDEQ;
	if (s == "callwdbecmdarpamod.cmdeq") return CALLWDBECMDARPAMOD_CMDEQ;
	if (s == "callwdbecmdmod") return CALLWDBECMDMOD;
	if (s == "callwdbecmdmod.retreueq") return CALLWDBECMDMOD_RETREUEQ;
	if (s == "callwdbecmdrctrmod.cmdeq") return CALLWDBECMDRCTRMOD_CMDEQ;
	if (s == "callwdbecmdrctrmod.ctreq") return CALLWDBECMDRCTRMOD_CTREQ;
	if (s == "callwdbecmdupd.refeq") return CALLWDBECMDUPD_REFEQ;
	if (s == "callwdbecpr.cvreq") return CALLWDBECPR_CVREQ;
	if (s == "callwdbecprmod") return CALLWDBECPRMOD;
	if (s == "callwdbecprrprsmod.cpreq") return CALLWDBECPRRPRSMOD_CPREQ;
	if (s == "callwdbecprrprsmod.prseq") return CALLWDBECPRRPRSMOD_PRSEQ;
	if (s == "callwdbecprupd.refeq") return CALLWDBECPRUPD_REFEQ;
	if (s == "callwdbecrdactive") return CALLWDBECRDACTIVE;
	if (s == "callwdbecrdclose") return CALLWDBECRDCLOSE;
	if (s == "callwdbecrdopen") return CALLWDBECRDOPEN;
	if (s == "callwdbectlaparmod.usreq") return CALLWDBECTLAPARMOD_USREQ;
	if (s == "callwdbectr.clreq") return CALLWDBECTR_CLREQ;
	if (s == "callwdbectr.fwd.insbs") return CALLWDBECTR_FWD_INSBS;
	if (s == "callwdbectr.fwdeq") return CALLWDBECTR_FWDEQ;
	if (s == "callwdbectr.mdl.insbs") return CALLWDBECTR_MDL_INSBS;
	if (s == "callwdbectrmod") return CALLWDBECTRMOD;
	if (s == "callwdbectrmod.fwdeq") return CALLWDBECTRMOD_FWDEQ;
	if (s == "callwdbectrupd.refeq") return CALLWDBECTRUPD_REFEQ;
	if (s == "callwdbecvr.bcveq") return CALLWDBECVR_BCVEQ;
	if (s == "callwdbecvr.cpreq") return CALLWDBECVR_CPREQ;
	if (s == "callwdbecvraipxmod.cvreq") return CALLWDBECVRAIPXMOD_CVREQ;
	if (s == "callwdbecvraplhmod.cvreq") return CALLWDBECVRAPLHMOD_CVREQ;
	if (s == "callwdbecvrjstemod.cvreq") return CALLWDBECVRJSTEMOD_CVREQ;
	if (s == "callwdbecvrmod") return CALLWDBECVRMOD;
	if (s == "callwdbecvrmod.bcveq") return CALLWDBECVRMOD_BCVEQ;
	if (s == "callwdbecvrmod.cpreq") return CALLWDBECVRMOD_CPREQ;
	if (s == "callwdbecvrupd.refeq") return CALLWDBECVRUPD_REFEQ;
	if (s == "callwdbedatchg") return CALLWDBEDATCHG;
	if (s == "callwdbedblvalpreset") return CALLWDBEDBLVALPRESET;
	if (s == "callwdbedlgclose") return CALLWDBEDLGCLOSE;
	if (s == "callwdbeerr.reteq") return CALLWDBEERR_RETEQ;
	if (s == "callwdbeerr.reu.insbs") return CALLWDBEERR_REU_INSBS;
	if (s == "callwdbeerr.reu.mdl.insbs") return CALLWDBEERR_REU_MDL_INSBS;
	if (s == "callwdbeerr.reueq") return CALLWDBEERR_REUEQ;
	if (s == "callwdbeerraparmod.erreq") return CALLWDBEERRAPARMOD_ERREQ;
	if (s == "callwdbeerrmod") return CALLWDBEERRMOD;
	if (s == "callwdbeerrmod.retreueq") return CALLWDBEERRMOD_RETREUEQ;
	if (s == "callwdbeerrupd.refeq") return CALLWDBEERRUPD_REFEQ;
	if (s == "callwdbefammod") return CALLWDBEFAMMOD;
	if (s == "callwdbefamupd.refeq") return CALLWDBEFAMUPD_REFEQ;
	if (s == "callwdbefil.clueq") return CALLWDBEFIL_CLUEQ;
	if (s == "callwdbefil.reteq") return CALLWDBEFIL_RETEQ;
	if (s == "callwdbefil.reueq") return CALLWDBEFIL_REUEQ;
	if (s == "callwdbefilmod") return CALLWDBEFILMOD;
	if (s == "callwdbefilmod.clueq") return CALLWDBEFILMOD_CLUEQ;
	if (s == "callwdbefilmod.retreueq") return CALLWDBEFILMOD_RETREUEQ;
	if (s == "callwdbefilupd.refeq") return CALLWDBEFILUPD_REFEQ;
	if (s == "callwdbefsmmod") return CALLWDBEFSMMOD;
	if (s == "callwdbefsmupd.refeq") return CALLWDBEFSMUPD_REFEQ;
	if (s == "callwdbefst.clueq") return CALLWDBEFST_CLUEQ;
	if (s == "callwdbefst.fsmeq") return CALLWDBEFST_FSMEQ;
	if (s == "callwdbefstastpmod.fsteq") return CALLWDBEFSTASTPMOD_FSTEQ;
	if (s == "callwdbefstmod") return CALLWDBEFSTMOD;
	if (s == "callwdbefstmod.clueq") return CALLWDBEFSTMOD_CLUEQ;
	if (s == "callwdbefstmod.fsmeq") return CALLWDBEFSTMOD_FSMEQ;
	if (s == "callwdbefstupd.refeq") return CALLWDBEFSTUPD_REFEQ;
	if (s == "callwdbegen.clueq") return CALLWDBEGEN_CLUEQ;
	if (s == "callwdbegen.mdl.insbs") return CALLWDBEGEN_MDL_INSBS;
	if (s == "callwdbegen.mdleq") return CALLWDBEGEN_MDLEQ;
	if (s == "callwdbegenmod") return CALLWDBEGENMOD;
	if (s == "callwdbegenmod.clueq") return CALLWDBEGENMOD_CLUEQ;
	if (s == "callwdbegenmod.mdleq") return CALLWDBEGENMOD_MDLEQ;
	if (s == "callwdbegenupd.refeq") return CALLWDBEGENUPD_REFEQ;
	if (s == "callwdbehusrrunvmod.crdusreq") return CALLWDBEHUSRRUNVMOD_CRDUSREQ;
	if (s == "callwdbeimb.coreq") return CALLWDBEIMB_COREQ;
	if (s == "callwdbeimb.mdl.insbs") return CALLWDBEIMB_MDL_INSBS;
	if (s == "callwdbeimbmod") return CALLWDBEIMBMOD;
	if (s == "callwdbeimbmod.coreq") return CALLWDBEIMBMOD_COREQ;
	if (s == "callwdbeimbupd.refeq") return CALLWDBEIMBUPD_REFEQ;
	if (s == "callwdbeintvalpreset") return CALLWDBEINTVALPRESET;
	if (s == "callwdbeixpreset") return CALLWDBEIXPRESET;
	if (s == "callwdbekakjkeymod.klsakeyeq") return CALLWDBEKAKJKEYMOD_KLSAKEYEQ;
	if (s == "callwdbeklsakeymod.klseq") return CALLWDBEKLSAKEYMOD_KLSEQ;
	if (s == "callwdbeklsakeymod.klsmtburfeq") return CALLWDBEKLSAKEYMOD_KLSMTBURFEQ;
	if (s == "callwdbelibamkfmod.libeq") return CALLWDBELIBAMKFMOD_LIBEQ;
	if (s == "callwdbelibamkfmod.mcheq") return CALLWDBELIBAMKFMOD_MCHEQ;
	if (s == "callwdbelibmod") return CALLWDBELIBMOD;
	if (s == "callwdbelibrvermod.libeq") return CALLWDBELIBRVERMOD_LIBEQ;
	if (s == "callwdbelibrvermod.vereq") return CALLWDBELIBRVERMOD_VEREQ;
	if (s == "callwdbelibupd.refeq") return CALLWDBELIBUPD_REFEQ;
	if (s == "callwdbelog") return CALLWDBELOG;
	if (s == "callwdbelogout") return CALLWDBELOGOUT;
	if (s == "callwdbemch.ccheq") return CALLWDBEMCH_CCHEQ;
	if (s == "callwdbemchamkfmod.mcheq") return CALLWDBEMCHAMKFMOD_MCHEQ;
	if (s == "callwdbemchaparmod.mcheq") return CALLWDBEMCHAPARMOD_MCHEQ;
	if (s == "callwdbemchmod") return CALLWDBEMCHMOD;
	if (s == "callwdbemchupd.refeq") return CALLWDBEMCHUPD_REFEQ;
	if (s == "callwdbemdl.ctreq") return CALLWDBEMDL_CTREQ;
	if (s == "callwdbemdl.hkteq") return CALLWDBEMDL_HKTEQ;
	if (s == "callwdbemdl.hku.insbs") return CALLWDBEMDL_HKU_INSBS;
	if (s == "callwdbemdl.hkueq") return CALLWDBEMDL_HKUEQ;
	if (s == "callwdbemdl.imbeq") return CALLWDBEMDL_IMBEQ;
	if (s == "callwdbemdl.insbs") return CALLWDBEMDL_INSBS;
	if (s == "callwdbemdl.sup.insbs") return CALLWDBEMDL_SUP_INSBS;
	if (s == "callwdbemdl.supeq") return CALLWDBEMDL_SUPEQ;
	if (s == "callwdbemdl.tpleq") return CALLWDBEMDL_TPLEQ;
	if (s == "callwdbemdl.typeq") return CALLWDBEMDL_TYPEQ;
	if (s == "callwdbemdlaparmod.mdleq") return CALLWDBEMDLAPARMOD_MDLEQ;
	if (s == "callwdbemdlmod") return CALLWDBEMDLMOD;
	if (s == "callwdbemdlmod.hkthkueq") return CALLWDBEMDLMOD_HKTHKUEQ;
	if (s == "callwdbemdlmod.supeq") return CALLWDBEMDLMOD_SUPEQ;
	if (s == "callwdbemdlmod.tpleq") return CALLWDBEMDLMOD_TPLEQ;
	if (s == "callwdbemdlupd.refeq") return CALLWDBEMDLUPD_REFEQ;
	if (s == "callwdbemonstatchg") return CALLWDBEMONSTATCHG;
	if (s == "callwdbenodechg") return CALLWDBENODECHG;
	if (s == "callwdbepin.bnkeq") return CALLWDBEPIN_BNKEQ;
	if (s == "callwdbepin.clueq") return CALLWDBEPIN_CLUEQ;
	if (s == "callwdbepinaparmod.pineq") return CALLWDBEPINAPARMOD_PINEQ;
	if (s == "callwdbepinjsrfmod.pineq") return CALLWDBEPINJSRFMOD_PINEQ;
	if (s == "callwdbepinjsrfmod.ppheq") return CALLWDBEPINJSRFMOD_PPHEQ;
	if (s == "callwdbepinmod") return CALLWDBEPINMOD;
	if (s == "callwdbepinmod.bnkeq") return CALLWDBEPINMOD_BNKEQ;
	if (s == "callwdbepinmod.clueq") return CALLWDBEPINMOD_CLUEQ;
	if (s == "callwdbepinupd.refeq") return CALLWDBEPINUPD_REFEQ;
	if (s == "callwdbepph.mdleq") return CALLWDBEPPH_MDLEQ;
	if (s == "callwdbepph.unt.insbs") return CALLWDBEPPH_UNT_INSBS;
	if (s == "callwdbepph.unteq") return CALLWDBEPPH_UNTEQ;
	if (s == "callwdbepphaparmod.ppheq") return CALLWDBEPPHAPARMOD_PPHEQ;
	if (s == "callwdbepphmod") return CALLWDBEPPHMOD;
	if (s == "callwdbepphmod.mdleq") return CALLWDBEPPHMOD_MDLEQ;
	if (s == "callwdbepphmod.unteq") return CALLWDBEPPHMOD_UNTEQ;
	if (s == "callwdbepphupd.refeq") return CALLWDBEPPHUPD_REFEQ;
	if (s == "callwdbeprc.fsmeq") return CALLWDBEPRC_FSMEQ;
	if (s == "callwdbeprc.mdleq") return CALLWDBEPRC_MDLEQ;
	if (s == "callwdbeprcmod") return CALLWDBEPRCMOD;
	if (s == "callwdbeprcmod.mdleq") return CALLWDBEPRCMOD_MDLEQ;
	if (s == "callwdbeprcupd.refeq") return CALLWDBEPRCUPD_REFEQ;
	if (s == "callwdbeprj.vereq") return CALLWDBEPRJ_VEREQ;
	if (s == "callwdbeprjmod") return CALLWDBEPRJMOD;
	if (s == "callwdbeprjupd.refeq") return CALLWDBEPRJUPD_REFEQ;
	if (s == "callwdbeprsadetmod.prseq") return CALLWDBEPRSADETMOD_PRSEQ;
	if (s == "callwdbeprsjlnmmod.prseq") return CALLWDBEPRSJLNMMOD_PRSEQ;
	if (s == "callwdbeprsmod") return CALLWDBEPRSMOD;
	if (s == "callwdbeprsrprjmod.prjeq") return CALLWDBEPRSRPRJMOD_PRJEQ;
	if (s == "callwdbeprsrprjmod.prseq") return CALLWDBEPRSRPRJMOD_PRSEQ;
	if (s == "callwdbeprsupd.refeq") return CALLWDBEPRSUPD_REFEQ;
	if (s == "callwdbeprt.clueq") return CALLWDBEPRT_CLUEQ;
	if (s == "callwdbeprt.mdl.insbs") return CALLWDBEPRT_MDL_INSBS;
	if (s == "callwdbeprt.mdleq") return CALLWDBEPRT_MDLEQ;
	if (s == "callwdbeprtmod") return CALLWDBEPRTMOD;
	if (s == "callwdbeprtmod.clueq") return CALLWDBEPRTMOD_CLUEQ;
	if (s == "callwdbeprtmod.mdleq") return CALLWDBEPRTMOD_MDLEQ;
	if (s == "callwdbeprtupd.refeq") return CALLWDBEPRTUPD_REFEQ;
	if (s == "callwdberecaccess") return CALLWDBERECACCESS;
	if (s == "callwdberefpreset") return CALLWDBEREFPRESET;
	if (s == "callwdberefspreset") return CALLWDBEREFSPRESET;
	if (s == "callwdbereptrstart") return CALLWDBEREPTRSTART;
	if (s == "callwdbereptrstop") return CALLWDBEREPTRSTOP;
	if (s == "callwdberls.mcheq") return CALLWDBERLS_MCHEQ;
	if (s == "callwdberls.vereq") return CALLWDBERLS_VEREQ;
	if (s == "callwdberlsmod") return CALLWDBERLSMOD;
	if (s == "callwdberlsmod.mcheq") return CALLWDBERLSMOD_MCHEQ;
	if (s == "callwdberlsmod.vereq") return CALLWDBERLSMOD_VEREQ;
	if (s == "callwdberlsupd.refeq") return CALLWDBERLSUPD_REFEQ;
	if (s == "callwdbesesmod") return CALLWDBESESMOD;
	if (s == "callwdbesesmod.usreq") return CALLWDBESESMOD_USREQ;
	if (s == "callwdbesesupd.refeq") return CALLWDBESESUPD_REFEQ;
	if (s == "callwdbesgechg") return CALLWDBESGECHG;
	if (s == "callwdbeshrdatchg") return CALLWDBESHRDATCHG;
	if (s == "callwdbesig.clueq") return CALLWDBESIG_CLUEQ;
	if (s == "callwdbesig.drveq") return CALLWDBESIG_DRVEQ;
	if (s == "callwdbesig.mdleq") return CALLWDBESIG_MDLEQ;
	if (s == "callwdbesig.mgteq") return CALLWDBESIG_MGTEQ;
	if (s == "callwdbesig.mgu.insbs") return CALLWDBESIG_MGU_INSBS;
	if (s == "callwdbesig.mgueq") return CALLWDBESIG_MGUEQ;
	if (s == "callwdbesig.veceq") return CALLWDBESIG_VECEQ;
	if (s == "callwdbesigmod") return CALLWDBESIGMOD;
	if (s == "callwdbesigmod.clueq") return CALLWDBESIGMOD_CLUEQ;
	if (s == "callwdbesigmod.mdleq") return CALLWDBESIGMOD_MDLEQ;
	if (s == "callwdbesigmod.mgtmgueq") return CALLWDBESIGMOD_MGTMGUEQ;
	if (s == "callwdbesigupd.refeq") return CALLWDBESIGUPD_REFEQ;
	if (s == "callwdbesrefpreset") return CALLWDBESREFPRESET;
	if (s == "callwdbestatchg") return CALLWDBESTATCHG;
	if (s == "callwdbestgchg") return CALLWDBESTGCHG;
	if (s == "callwdbestubchg") return CALLWDBESTUBCHG;
	if (s == "callwdbesuspsess") return CALLWDBESUSPSESS;
	if (s == "callwdbesys.unt.insbs") return CALLWDBESYS_UNT_INSBS;
	if (s == "callwdbesys.unteq") return CALLWDBESYS_UNTEQ;
	if (s == "callwdbesys.vereq") return CALLWDBESYS_VEREQ;
	if (s == "callwdbesysmod") return CALLWDBESYSMOD;
	if (s == "callwdbesysmod.vereq") return CALLWDBESYSMOD_VEREQ;
	if (s == "callwdbesysupd.refeq") return CALLWDBESYSUPD_REFEQ;
	if (s == "callwdbetrg.syseq") return CALLWDBETRG_SYSEQ;
	if (s == "callwdbetrg.unt.insbs") return CALLWDBETRG_UNT_INSBS;
	if (s == "callwdbetrg.unteq") return CALLWDBETRG_UNTEQ;
	if (s == "callwdbetrgmod") return CALLWDBETRGMOD;
	if (s == "callwdbetrgmod.syseq") return CALLWDBETRGMOD_SYSEQ;
	if (s == "callwdbetrgmod.unteq") return CALLWDBETRGMOD_UNTEQ;
	if (s == "callwdbetrgupd.refeq") return CALLWDBETRGUPD_REFEQ;
	if (s == "callwdbetxtvalpreset") return CALLWDBETXTVALPRESET;
	if (s == "callwdbeunt.insbs") return CALLWDBEUNT_INSBS;
	if (s == "callwdbeunt.mdleq") return CALLWDBEUNT_MDLEQ;
	if (s == "callwdbeunt.reteq") return CALLWDBEUNT_RETEQ;
	if (s == "callwdbeunt.reueq") return CALLWDBEUNT_REUEQ;
	if (s == "callwdbeunt.sileq") return CALLWDBEUNT_SILEQ;
	if (s == "callwdbeunt.syseq") return CALLWDBEUNT_SYSEQ;
	if (s == "callwdbeuntmod") return CALLWDBEUNTMOD;
	if (s == "callwdbeuntmod.retreueq") return CALLWDBEUNTMOD_RETREUEQ;
	if (s == "callwdbeuntmod.sileq") return CALLWDBEUNTMOD_SILEQ;
	if (s == "callwdbeuntupd.refeq") return CALLWDBEUNTUPD_REFEQ;
	if (s == "callwdbeusgaaccmod.usgeq") return CALLWDBEUSGAACCMOD_USGEQ;
	if (s == "callwdbeusgmod") return CALLWDBEUSGMOD;
	if (s == "callwdbeusgupd.refeq") return CALLWDBEUSGUPD_REFEQ;
	if (s == "callwdbeusr.prseq") return CALLWDBEUSR_PRSEQ;
	if (s == "callwdbeusr.usgeq") return CALLWDBEUSR_USGEQ;
	if (s == "callwdbeusraaccmod.usreq") return CALLWDBEUSRAACCMOD_USREQ;
	if (s == "callwdbeusrjstemod.usreq") return CALLWDBEUSRJSTEMOD_USREQ;
	if (s == "callwdbeusrmod") return CALLWDBEUSRMOD;
	if (s == "callwdbeusrrusgmod.usgeq") return CALLWDBEUSRRUSGMOD_USGEQ;
	if (s == "callwdbeusrrusgmod.usreq") return CALLWDBEUSRRUSGMOD_USREQ;
	if (s == "callwdbeusrupd.refeq") return CALLWDBEUSRUPD_REFEQ;
	if (s == "callwdbevar.clueq") return CALLWDBEVAR_CLUEQ;
	if (s == "callwdbevarmod") return CALLWDBEVARMOD;
	if (s == "callwdbevarmod.clueq") return CALLWDBEVARMOD_CLUEQ;
	if (s == "callwdbevarmod.prceq") return CALLWDBEVARMOD_PRCEQ;
	if (s == "callwdbevarupd.refeq") return CALLWDBEVARUPD_REFEQ;
	if (s == "callwdbevec.hkteq") return CALLWDBEVEC_HKTEQ;
	if (s == "callwdbevec.hku.insbs") return CALLWDBEVEC_HKU_INSBS;
	if (s == "callwdbevec.hku.mdl.insbs") return CALLWDBEVEC_HKU_MDL_INSBS;
	if (s == "callwdbevec.hkueq") return CALLWDBEVEC_HKUEQ;
	if (s == "callwdbevecmod") return CALLWDBEVECMOD;
	if (s == "callwdbevecmod.hkthkueq") return CALLWDBEVECMOD_HKTHKUEQ;
	if (s == "callwdbevecupd.refeq") return CALLWDBEVECUPD_REFEQ;
	if (s == "callwdbever.bvreq") return CALLWDBEVER_BVREQ;
	if (s == "callwdbever.prjeq") return CALLWDBEVER_PRJEQ;
	if (s == "callwdbever.steeq") return CALLWDBEVER_STEEQ;
	if (s == "callwdbeverjstemod.vereq") return CALLWDBEVERJSTEMOD_VEREQ;
	if (s == "callwdbevermod") return CALLWDBEVERMOD;
	if (s == "callwdbevermod.bvreq") return CALLWDBEVERMOD_BVREQ;
	if (s == "callwdbevermod.prjeq") return CALLWDBEVERMOD_PRJEQ;
	if (s == "callwdbeverupd.refeq") return CALLWDBEVERUPD_REFEQ;
	if (s == "callwdbevit.veceq") return CALLWDBEVIT_VECEQ;
	if (s == "callwdbevitmod") return CALLWDBEVITMOD;
	if (s == "callwdbevitmod.veceq") return CALLWDBEVITMOD_VECEQ;
	if (s == "callwdbevitupd.refeq") return CALLWDBEVITUPD_REFEQ;

	return(0);
};

string VecWdbeVCall::getSref(
			const uint ix
		) {
	if (ix == CALLWDBEBNK_UNT_INSBS) return("CallWdbeBnk.unt.inSbs");
	if (ix == CALLWDBEBNK_UNTEQ) return("CallWdbeBnk.untEq");
	if (ix == CALLWDBEBNKMOD) return("CallWdbeBnkMod");
	if (ix == CALLWDBEBNKMOD_UNTEQ) return("CallWdbeBnkMod.untEq");
	if (ix == CALLWDBEBNKUPD_REFEQ) return("CallWdbeBnkUpd.refEq");
	if (ix == CALLWDBEBOOLVALPRESET) return("CallWdbeBoolvalPreSet");
	if (ix == CALLWDBECLAIMCHG) return("CallWdbeClaimChg");
	if (ix == CALLWDBECMD_RETEQ) return("CallWdbeCmd.retEq");
	if (ix == CALLWDBECMD_REU_INSBS) return("CallWdbeCmd.reu.inSbs");
	if (ix == CALLWDBECMD_REU_MDL_INSBS) return("CallWdbeCmd.reu.mdl.inSbs");
	if (ix == CALLWDBECMD_REUEQ) return("CallWdbeCmd.reuEq");
	if (ix == CALLWDBECMDAIPAMOD_CMDEQ) return("CallWdbeCmdAipaMod.cmdEq");
	if (ix == CALLWDBECMDARPAMOD_CMDEQ) return("CallWdbeCmdArpaMod.cmdEq");
	if (ix == CALLWDBECMDMOD) return("CallWdbeCmdMod");
	if (ix == CALLWDBECMDMOD_RETREUEQ) return("CallWdbeCmdMod.retReuEq");
	if (ix == CALLWDBECMDRCTRMOD_CMDEQ) return("CallWdbeCmdRctrMod.cmdEq");
	if (ix == CALLWDBECMDRCTRMOD_CTREQ) return("CallWdbeCmdRctrMod.ctrEq");
	if (ix == CALLWDBECMDUPD_REFEQ) return("CallWdbeCmdUpd.refEq");
	if (ix == CALLWDBECPR_CVREQ) return("CallWdbeCpr.cvrEq");
	if (ix == CALLWDBECPRMOD) return("CallWdbeCprMod");
	if (ix == CALLWDBECPRRPRSMOD_CPREQ) return("CallWdbeCprRprsMod.cprEq");
	if (ix == CALLWDBECPRRPRSMOD_PRSEQ) return("CallWdbeCprRprsMod.prsEq");
	if (ix == CALLWDBECPRUPD_REFEQ) return("CallWdbeCprUpd.refEq");
	if (ix == CALLWDBECRDACTIVE) return("CallWdbeCrdActive");
	if (ix == CALLWDBECRDCLOSE) return("CallWdbeCrdClose");
	if (ix == CALLWDBECRDOPEN) return("CallWdbeCrdOpen");
	if (ix == CALLWDBECTLAPARMOD_USREQ) return("CallWdbeCtlAparMod.usrEq");
	if (ix == CALLWDBECTR_CLREQ) return("CallWdbeCtr.clrEq");
	if (ix == CALLWDBECTR_FWD_INSBS) return("CallWdbeCtr.fwd.inSbs");
	if (ix == CALLWDBECTR_FWDEQ) return("CallWdbeCtr.fwdEq");
	if (ix == CALLWDBECTR_MDL_INSBS) return("CallWdbeCtr.mdl.inSbs");
	if (ix == CALLWDBECTRMOD) return("CallWdbeCtrMod");
	if (ix == CALLWDBECTRMOD_FWDEQ) return("CallWdbeCtrMod.fwdEq");
	if (ix == CALLWDBECTRUPD_REFEQ) return("CallWdbeCtrUpd.refEq");
	if (ix == CALLWDBECVR_BCVEQ) return("CallWdbeCvr.bcvEq");
	if (ix == CALLWDBECVR_CPREQ) return("CallWdbeCvr.cprEq");
	if (ix == CALLWDBECVRAIPXMOD_CVREQ) return("CallWdbeCvrAipxMod.cvrEq");
	if (ix == CALLWDBECVRAPLHMOD_CVREQ) return("CallWdbeCvrAplhMod.cvrEq");
	if (ix == CALLWDBECVRJSTEMOD_CVREQ) return("CallWdbeCvrJsteMod.cvrEq");
	if (ix == CALLWDBECVRMOD) return("CallWdbeCvrMod");
	if (ix == CALLWDBECVRMOD_BCVEQ) return("CallWdbeCvrMod.bcvEq");
	if (ix == CALLWDBECVRMOD_CPREQ) return("CallWdbeCvrMod.cprEq");
	if (ix == CALLWDBECVRUPD_REFEQ) return("CallWdbeCvrUpd.refEq");
	if (ix == CALLWDBEDATCHG) return("CallWdbeDatChg");
	if (ix == CALLWDBEDBLVALPRESET) return("CallWdbeDblvalPreSet");
	if (ix == CALLWDBEDLGCLOSE) return("CallWdbeDlgClose");
	if (ix == CALLWDBEERR_RETEQ) return("CallWdbeErr.retEq");
	if (ix == CALLWDBEERR_REU_INSBS) return("CallWdbeErr.reu.inSbs");
	if (ix == CALLWDBEERR_REU_MDL_INSBS) return("CallWdbeErr.reu.mdl.inSbs");
	if (ix == CALLWDBEERR_REUEQ) return("CallWdbeErr.reuEq");
	if (ix == CALLWDBEERRAPARMOD_ERREQ) return("CallWdbeErrAparMod.errEq");
	if (ix == CALLWDBEERRMOD) return("CallWdbeErrMod");
	if (ix == CALLWDBEERRMOD_RETREUEQ) return("CallWdbeErrMod.retReuEq");
	if (ix == CALLWDBEERRUPD_REFEQ) return("CallWdbeErrUpd.refEq");
	if (ix == CALLWDBEFAMMOD) return("CallWdbeFamMod");
	if (ix == CALLWDBEFAMUPD_REFEQ) return("CallWdbeFamUpd.refEq");
	if (ix == CALLWDBEFIL_CLUEQ) return("CallWdbeFil.cluEq");
	if (ix == CALLWDBEFIL_RETEQ) return("CallWdbeFil.retEq");
	if (ix == CALLWDBEFIL_REUEQ) return("CallWdbeFil.reuEq");
	if (ix == CALLWDBEFILMOD) return("CallWdbeFilMod");
	if (ix == CALLWDBEFILMOD_CLUEQ) return("CallWdbeFilMod.cluEq");
	if (ix == CALLWDBEFILMOD_RETREUEQ) return("CallWdbeFilMod.retReuEq");
	if (ix == CALLWDBEFILUPD_REFEQ) return("CallWdbeFilUpd.refEq");
	if (ix == CALLWDBEFSMMOD) return("CallWdbeFsmMod");
	if (ix == CALLWDBEFSMUPD_REFEQ) return("CallWdbeFsmUpd.refEq");
	if (ix == CALLWDBEFST_CLUEQ) return("CallWdbeFst.cluEq");
	if (ix == CALLWDBEFST_FSMEQ) return("CallWdbeFst.fsmEq");
	if (ix == CALLWDBEFSTASTPMOD_FSTEQ) return("CallWdbeFstAstpMod.fstEq");
	if (ix == CALLWDBEFSTMOD) return("CallWdbeFstMod");
	if (ix == CALLWDBEFSTMOD_CLUEQ) return("CallWdbeFstMod.cluEq");
	if (ix == CALLWDBEFSTMOD_FSMEQ) return("CallWdbeFstMod.fsmEq");
	if (ix == CALLWDBEFSTUPD_REFEQ) return("CallWdbeFstUpd.refEq");
	if (ix == CALLWDBEGEN_CLUEQ) return("CallWdbeGen.cluEq");
	if (ix == CALLWDBEGEN_MDL_INSBS) return("CallWdbeGen.mdl.inSbs");
	if (ix == CALLWDBEGEN_MDLEQ) return("CallWdbeGen.mdlEq");
	if (ix == CALLWDBEGENMOD) return("CallWdbeGenMod");
	if (ix == CALLWDBEGENMOD_CLUEQ) return("CallWdbeGenMod.cluEq");
	if (ix == CALLWDBEGENMOD_MDLEQ) return("CallWdbeGenMod.mdlEq");
	if (ix == CALLWDBEGENUPD_REFEQ) return("CallWdbeGenUpd.refEq");
	if (ix == CALLWDBEHUSRRUNVMOD_CRDUSREQ) return("CallWdbeHusrRunvMod.crdUsrEq");
	if (ix == CALLWDBEIMB_COREQ) return("CallWdbeImb.corEq");
	if (ix == CALLWDBEIMB_MDL_INSBS) return("CallWdbeImb.mdl.inSbs");
	if (ix == CALLWDBEIMBMOD) return("CallWdbeImbMod");
	if (ix == CALLWDBEIMBMOD_COREQ) return("CallWdbeImbMod.corEq");
	if (ix == CALLWDBEIMBUPD_REFEQ) return("CallWdbeImbUpd.refEq");
	if (ix == CALLWDBEINTVALPRESET) return("CallWdbeIntvalPreSet");
	if (ix == CALLWDBEIXPRESET) return("CallWdbeIxPreSet");
	if (ix == CALLWDBEKAKJKEYMOD_KLSAKEYEQ) return("CallWdbeKakJkeyMod.klsAkeyEq");
	if (ix == CALLWDBEKLSAKEYMOD_KLSEQ) return("CallWdbeKlsAkeyMod.klsEq");
	if (ix == CALLWDBEKLSAKEYMOD_KLSMTBURFEQ) return("CallWdbeKlsAkeyMod.klsMtbUrfEq");
	if (ix == CALLWDBELIBAMKFMOD_LIBEQ) return("CallWdbeLibAmkfMod.libEq");
	if (ix == CALLWDBELIBAMKFMOD_MCHEQ) return("CallWdbeLibAmkfMod.mchEq");
	if (ix == CALLWDBELIBMOD) return("CallWdbeLibMod");
	if (ix == CALLWDBELIBRVERMOD_LIBEQ) return("CallWdbeLibRverMod.libEq");
	if (ix == CALLWDBELIBRVERMOD_VEREQ) return("CallWdbeLibRverMod.verEq");
	if (ix == CALLWDBELIBUPD_REFEQ) return("CallWdbeLibUpd.refEq");
	if (ix == CALLWDBELOG) return("CallWdbeLog");
	if (ix == CALLWDBELOGOUT) return("CallWdbeLogout");
	if (ix == CALLWDBEMCH_CCHEQ) return("CallWdbeMch.cchEq");
	if (ix == CALLWDBEMCHAMKFMOD_MCHEQ) return("CallWdbeMchAmkfMod.mchEq");
	if (ix == CALLWDBEMCHAPARMOD_MCHEQ) return("CallWdbeMchAparMod.mchEq");
	if (ix == CALLWDBEMCHMOD) return("CallWdbeMchMod");
	if (ix == CALLWDBEMCHUPD_REFEQ) return("CallWdbeMchUpd.refEq");
	if (ix == CALLWDBEMDL_CTREQ) return("CallWdbeMdl.ctrEq");
	if (ix == CALLWDBEMDL_HKTEQ) return("CallWdbeMdl.hktEq");
	if (ix == CALLWDBEMDL_HKU_INSBS) return("CallWdbeMdl.hku.inSbs");
	if (ix == CALLWDBEMDL_HKUEQ) return("CallWdbeMdl.hkuEq");
	if (ix == CALLWDBEMDL_IMBEQ) return("CallWdbeMdl.imbEq");
	if (ix == CALLWDBEMDL_INSBS) return("CallWdbeMdl.inSbs");
	if (ix == CALLWDBEMDL_SUP_INSBS) return("CallWdbeMdl.sup.inSbs");
	if (ix == CALLWDBEMDL_SUPEQ) return("CallWdbeMdl.supEq");
	if (ix == CALLWDBEMDL_TPLEQ) return("CallWdbeMdl.tplEq");
	if (ix == CALLWDBEMDL_TYPEQ) return("CallWdbeMdl.typEq");
	if (ix == CALLWDBEMDLAPARMOD_MDLEQ) return("CallWdbeMdlAparMod.mdlEq");
	if (ix == CALLWDBEMDLMOD) return("CallWdbeMdlMod");
	if (ix == CALLWDBEMDLMOD_HKTHKUEQ) return("CallWdbeMdlMod.hktHkuEq");
	if (ix == CALLWDBEMDLMOD_SUPEQ) return("CallWdbeMdlMod.supEq");
	if (ix == CALLWDBEMDLMOD_TPLEQ) return("CallWdbeMdlMod.tplEq");
	if (ix == CALLWDBEMDLUPD_REFEQ) return("CallWdbeMdlUpd.refEq");
	if (ix == CALLWDBEMONSTATCHG) return("CallWdbeMonstatChg");
	if (ix == CALLWDBENODECHG) return("CallWdbeNodeChg");
	if (ix == CALLWDBEPIN_BNKEQ) return("CallWdbePin.bnkEq");
	if (ix == CALLWDBEPIN_CLUEQ) return("CallWdbePin.cluEq");
	if (ix == CALLWDBEPINAPARMOD_PINEQ) return("CallWdbePinAparMod.pinEq");
	if (ix == CALLWDBEPINJSRFMOD_PINEQ) return("CallWdbePinJsrfMod.pinEq");
	if (ix == CALLWDBEPINJSRFMOD_PPHEQ) return("CallWdbePinJsrfMod.pphEq");
	if (ix == CALLWDBEPINMOD) return("CallWdbePinMod");
	if (ix == CALLWDBEPINMOD_BNKEQ) return("CallWdbePinMod.bnkEq");
	if (ix == CALLWDBEPINMOD_CLUEQ) return("CallWdbePinMod.cluEq");
	if (ix == CALLWDBEPINUPD_REFEQ) return("CallWdbePinUpd.refEq");
	if (ix == CALLWDBEPPH_MDLEQ) return("CallWdbePph.mdlEq");
	if (ix == CALLWDBEPPH_UNT_INSBS) return("CallWdbePph.unt.inSbs");
	if (ix == CALLWDBEPPH_UNTEQ) return("CallWdbePph.untEq");
	if (ix == CALLWDBEPPHAPARMOD_PPHEQ) return("CallWdbePphAparMod.pphEq");
	if (ix == CALLWDBEPPHMOD) return("CallWdbePphMod");
	if (ix == CALLWDBEPPHMOD_MDLEQ) return("CallWdbePphMod.mdlEq");
	if (ix == CALLWDBEPPHMOD_UNTEQ) return("CallWdbePphMod.untEq");
	if (ix == CALLWDBEPPHUPD_REFEQ) return("CallWdbePphUpd.refEq");
	if (ix == CALLWDBEPRC_FSMEQ) return("CallWdbePrc.fsmEq");
	if (ix == CALLWDBEPRC_MDLEQ) return("CallWdbePrc.mdlEq");
	if (ix == CALLWDBEPRCMOD) return("CallWdbePrcMod");
	if (ix == CALLWDBEPRCMOD_MDLEQ) return("CallWdbePrcMod.mdlEq");
	if (ix == CALLWDBEPRCUPD_REFEQ) return("CallWdbePrcUpd.refEq");
	if (ix == CALLWDBEPRJ_VEREQ) return("CallWdbePrj.verEq");
	if (ix == CALLWDBEPRJMOD) return("CallWdbePrjMod");
	if (ix == CALLWDBEPRJUPD_REFEQ) return("CallWdbePrjUpd.refEq");
	if (ix == CALLWDBEPRSADETMOD_PRSEQ) return("CallWdbePrsAdetMod.prsEq");
	if (ix == CALLWDBEPRSJLNMMOD_PRSEQ) return("CallWdbePrsJlnmMod.prsEq");
	if (ix == CALLWDBEPRSMOD) return("CallWdbePrsMod");
	if (ix == CALLWDBEPRSRPRJMOD_PRJEQ) return("CallWdbePrsRprjMod.prjEq");
	if (ix == CALLWDBEPRSRPRJMOD_PRSEQ) return("CallWdbePrsRprjMod.prsEq");
	if (ix == CALLWDBEPRSUPD_REFEQ) return("CallWdbePrsUpd.refEq");
	if (ix == CALLWDBEPRT_CLUEQ) return("CallWdbePrt.cluEq");
	if (ix == CALLWDBEPRT_MDL_INSBS) return("CallWdbePrt.mdl.inSbs");
	if (ix == CALLWDBEPRT_MDLEQ) return("CallWdbePrt.mdlEq");
	if (ix == CALLWDBEPRTMOD) return("CallWdbePrtMod");
	if (ix == CALLWDBEPRTMOD_CLUEQ) return("CallWdbePrtMod.cluEq");
	if (ix == CALLWDBEPRTMOD_MDLEQ) return("CallWdbePrtMod.mdlEq");
	if (ix == CALLWDBEPRTUPD_REFEQ) return("CallWdbePrtUpd.refEq");
	if (ix == CALLWDBERECACCESS) return("CallWdbeRecaccess");
	if (ix == CALLWDBEREFPRESET) return("CallWdbeRefPreSet");
	if (ix == CALLWDBEREFSPRESET) return("CallWdbeRefsPreSet");
	if (ix == CALLWDBEREPTRSTART) return("CallWdbeReptrStart");
	if (ix == CALLWDBEREPTRSTOP) return("CallWdbeReptrStop");
	if (ix == CALLWDBERLS_MCHEQ) return("CallWdbeRls.mchEq");
	if (ix == CALLWDBERLS_VEREQ) return("CallWdbeRls.verEq");
	if (ix == CALLWDBERLSMOD) return("CallWdbeRlsMod");
	if (ix == CALLWDBERLSMOD_MCHEQ) return("CallWdbeRlsMod.mchEq");
	if (ix == CALLWDBERLSMOD_VEREQ) return("CallWdbeRlsMod.verEq");
	if (ix == CALLWDBERLSUPD_REFEQ) return("CallWdbeRlsUpd.refEq");
	if (ix == CALLWDBESESMOD) return("CallWdbeSesMod");
	if (ix == CALLWDBESESMOD_USREQ) return("CallWdbeSesMod.usrEq");
	if (ix == CALLWDBESESUPD_REFEQ) return("CallWdbeSesUpd.refEq");
	if (ix == CALLWDBESGECHG) return("CallWdbeSgeChg");
	if (ix == CALLWDBESHRDATCHG) return("CallWdbeShrdatChg");
	if (ix == CALLWDBESIG_CLUEQ) return("CallWdbeSig.cluEq");
	if (ix == CALLWDBESIG_DRVEQ) return("CallWdbeSig.drvEq");
	if (ix == CALLWDBESIG_MDLEQ) return("CallWdbeSig.mdlEq");
	if (ix == CALLWDBESIG_MGTEQ) return("CallWdbeSig.mgtEq");
	if (ix == CALLWDBESIG_MGU_INSBS) return("CallWdbeSig.mgu.inSbs");
	if (ix == CALLWDBESIG_MGUEQ) return("CallWdbeSig.mguEq");
	if (ix == CALLWDBESIG_VECEQ) return("CallWdbeSig.vecEq");
	if (ix == CALLWDBESIGMOD) return("CallWdbeSigMod");
	if (ix == CALLWDBESIGMOD_CLUEQ) return("CallWdbeSigMod.cluEq");
	if (ix == CALLWDBESIGMOD_MDLEQ) return("CallWdbeSigMod.mdlEq");
	if (ix == CALLWDBESIGMOD_MGTMGUEQ) return("CallWdbeSigMod.mgtMguEq");
	if (ix == CALLWDBESIGUPD_REFEQ) return("CallWdbeSigUpd.refEq");
	if (ix == CALLWDBESREFPRESET) return("CallWdbeSrefPreSet");
	if (ix == CALLWDBESTATCHG) return("CallWdbeStatChg");
	if (ix == CALLWDBESTGCHG) return("CallWdbeStgChg");
	if (ix == CALLWDBESTUBCHG) return("CallWdbeStubChg");
	if (ix == CALLWDBESUSPSESS) return("CallWdbeSuspsess");
	if (ix == CALLWDBESYS_UNT_INSBS) return("CallWdbeSys.unt.inSbs");
	if (ix == CALLWDBESYS_UNTEQ) return("CallWdbeSys.untEq");
	if (ix == CALLWDBESYS_VEREQ) return("CallWdbeSys.verEq");
	if (ix == CALLWDBESYSMOD) return("CallWdbeSysMod");
	if (ix == CALLWDBESYSMOD_VEREQ) return("CallWdbeSysMod.verEq");
	if (ix == CALLWDBESYSUPD_REFEQ) return("CallWdbeSysUpd.refEq");
	if (ix == CALLWDBETRG_SYSEQ) return("CallWdbeTrg.sysEq");
	if (ix == CALLWDBETRG_UNT_INSBS) return("CallWdbeTrg.unt.inSbs");
	if (ix == CALLWDBETRG_UNTEQ) return("CallWdbeTrg.untEq");
	if (ix == CALLWDBETRGMOD) return("CallWdbeTrgMod");
	if (ix == CALLWDBETRGMOD_SYSEQ) return("CallWdbeTrgMod.sysEq");
	if (ix == CALLWDBETRGMOD_UNTEQ) return("CallWdbeTrgMod.untEq");
	if (ix == CALLWDBETRGUPD_REFEQ) return("CallWdbeTrgUpd.refEq");
	if (ix == CALLWDBETXTVALPRESET) return("CallWdbeTxtvalPreSet");
	if (ix == CALLWDBEUNT_INSBS) return("CallWdbeUnt.inSbs");
	if (ix == CALLWDBEUNT_MDLEQ) return("CallWdbeUnt.mdlEq");
	if (ix == CALLWDBEUNT_RETEQ) return("CallWdbeUnt.retEq");
	if (ix == CALLWDBEUNT_REUEQ) return("CallWdbeUnt.reuEq");
	if (ix == CALLWDBEUNT_SILEQ) return("CallWdbeUnt.silEq");
	if (ix == CALLWDBEUNT_SYSEQ) return("CallWdbeUnt.sysEq");
	if (ix == CALLWDBEUNTMOD) return("CallWdbeUntMod");
	if (ix == CALLWDBEUNTMOD_RETREUEQ) return("CallWdbeUntMod.retReuEq");
	if (ix == CALLWDBEUNTMOD_SILEQ) return("CallWdbeUntMod.silEq");
	if (ix == CALLWDBEUNTUPD_REFEQ) return("CallWdbeUntUpd.refEq");
	if (ix == CALLWDBEUSGAACCMOD_USGEQ) return("CallWdbeUsgAaccMod.usgEq");
	if (ix == CALLWDBEUSGMOD) return("CallWdbeUsgMod");
	if (ix == CALLWDBEUSGUPD_REFEQ) return("CallWdbeUsgUpd.refEq");
	if (ix == CALLWDBEUSR_PRSEQ) return("CallWdbeUsr.prsEq");
	if (ix == CALLWDBEUSR_USGEQ) return("CallWdbeUsr.usgEq");
	if (ix == CALLWDBEUSRAACCMOD_USREQ) return("CallWdbeUsrAaccMod.usrEq");
	if (ix == CALLWDBEUSRJSTEMOD_USREQ) return("CallWdbeUsrJsteMod.usrEq");
	if (ix == CALLWDBEUSRMOD) return("CallWdbeUsrMod");
	if (ix == CALLWDBEUSRRUSGMOD_USGEQ) return("CallWdbeUsrRusgMod.usgEq");
	if (ix == CALLWDBEUSRRUSGMOD_USREQ) return("CallWdbeUsrRusgMod.usrEq");
	if (ix == CALLWDBEUSRUPD_REFEQ) return("CallWdbeUsrUpd.refEq");
	if (ix == CALLWDBEVAR_CLUEQ) return("CallWdbeVar.cluEq");
	if (ix == CALLWDBEVARMOD) return("CallWdbeVarMod");
	if (ix == CALLWDBEVARMOD_CLUEQ) return("CallWdbeVarMod.cluEq");
	if (ix == CALLWDBEVARMOD_PRCEQ) return("CallWdbeVarMod.prcEq");
	if (ix == CALLWDBEVARUPD_REFEQ) return("CallWdbeVarUpd.refEq");
	if (ix == CALLWDBEVEC_HKTEQ) return("CallWdbeVec.hktEq");
	if (ix == CALLWDBEVEC_HKU_INSBS) return("CallWdbeVec.hku.inSbs");
	if (ix == CALLWDBEVEC_HKU_MDL_INSBS) return("CallWdbeVec.hku.mdl.inSbs");
	if (ix == CALLWDBEVEC_HKUEQ) return("CallWdbeVec.hkuEq");
	if (ix == CALLWDBEVECMOD) return("CallWdbeVecMod");
	if (ix == CALLWDBEVECMOD_HKTHKUEQ) return("CallWdbeVecMod.hktHkuEq");
	if (ix == CALLWDBEVECUPD_REFEQ) return("CallWdbeVecUpd.refEq");
	if (ix == CALLWDBEVER_BVREQ) return("CallWdbeVer.bvrEq");
	if (ix == CALLWDBEVER_PRJEQ) return("CallWdbeVer.prjEq");
	if (ix == CALLWDBEVER_STEEQ) return("CallWdbeVer.steEq");
	if (ix == CALLWDBEVERJSTEMOD_VEREQ) return("CallWdbeVerJsteMod.verEq");
	if (ix == CALLWDBEVERMOD) return("CallWdbeVerMod");
	if (ix == CALLWDBEVERMOD_BVREQ) return("CallWdbeVerMod.bvrEq");
	if (ix == CALLWDBEVERMOD_PRJEQ) return("CallWdbeVerMod.prjEq");
	if (ix == CALLWDBEVERUPD_REFEQ) return("CallWdbeVerUpd.refEq");
	if (ix == CALLWDBEVIT_VECEQ) return("CallWdbeVit.vecEq");
	if (ix == CALLWDBEVITMOD) return("CallWdbeVitMod");
	if (ix == CALLWDBEVITMOD_VECEQ) return("CallWdbeVitMod.vecEq");
	if (ix == CALLWDBEVITUPD_REFEQ) return("CallWdbeVitUpd.refEq");

	return("");
};

