/**
	* \file VecWdbeVJob.cpp
	* vector VecWdbeVJob (implementation)
	* \copyright (C) 2016-2020 MPSI Technologies GmbH
	* \author Alexander Wirthmueller (auto-generation)
	* \date created: 28 Nov 2020
  */
// IP header --- ABOVE

#include "VecWdbeVJob.h"

using namespace std;
using namespace Sbecore;
using namespace Xmlio;

/******************************************************************************
 namespace VecWdbeVJob
 ******************************************************************************/

uint VecWdbeVJob::getIx(
			const string& sref
		) {
	string s = StrMod::lc(sref);

	if (s == "crdwdbebnk") return CRDWDBEBNK;
	if (s == "crdwdbecmd") return CRDWDBECMD;
	if (s == "crdwdbecpr") return CRDWDBECPR;
	if (s == "crdwdbecvr") return CRDWDBECVR;
	if (s == "crdwdbeerr") return CRDWDBEERR;
	if (s == "crdwdbefam") return CRDWDBEFAM;
	if (s == "crdwdbefil") return CRDWDBEFIL;
	if (s == "crdwdbefst") return CRDWDBEFST;
	if (s == "crdwdbegen") return CRDWDBEGEN;
	if (s == "crdwdbeint") return CRDWDBEINT;
	if (s == "crdwdbelib") return CRDWDBELIB;
	if (s == "crdwdbemch") return CRDWDBEMCH;
	if (s == "crdwdbemod") return CRDWDBEMOD;
	if (s == "crdwdbemtp") return CRDWDBEMTP;
	if (s == "crdwdbenav") return CRDWDBENAV;
	if (s == "crdwdbepin") return CRDWDBEPIN;
	if (s == "crdwdbepph") return CRDWDBEPPH;
	if (s == "crdwdbeppl") return CRDWDBEPPL;
	if (s == "crdwdbeprc") return CRDWDBEPRC;
	if (s == "crdwdbeprj") return CRDWDBEPRJ;
	if (s == "crdwdbeprs") return CRDWDBEPRS;
	if (s == "crdwdbeprt") return CRDWDBEPRT;
	if (s == "crdwdberls") return CRDWDBERLS;
	if (s == "crdwdbeseg") return CRDWDBESEG;
	if (s == "crdwdbesig") return CRDWDBESIG;
	if (s == "crdwdbesil") return CRDWDBESIL;
	if (s == "crdwdbesns") return CRDWDBESNS;
	if (s == "crdwdbesys") return CRDWDBESYS;
	if (s == "crdwdbetrg") return CRDWDBETRG;
	if (s == "crdwdbeunt") return CRDWDBEUNT;
	if (s == "crdwdbeusg") return CRDWDBEUSG;
	if (s == "crdwdbeusr") return CRDWDBEUSR;
	if (s == "crdwdbeutl") return CRDWDBEUTL;
	if (s == "crdwdbevar") return CRDWDBEVAR;
	if (s == "crdwdbevec") return CRDWDBEVEC;
	if (s == "crdwdbever") return CRDWDBEVER;
	if (s == "crdwdbevit") return CRDWDBEVIT;
	if (s == "dlgwdbecprnew") return DLGWDBECPRNEW;
	if (s == "dlgwdbecvrbsccd") return DLGWDBECVRBSCCD;
	if (s == "dlgwdbecvrdetcd") return DLGWDBECVRDETCD;
	if (s == "dlgwdbecvrnew") return DLGWDBECVRNEW;
	if (s == "dlgwdbecvrwrite") return DLGWDBECVRWRITE;
	if (s == "dlgwdbefildownload") return DLGWDBEFILDOWNLOAD;
	if (s == "dlgwdbefilnew") return DLGWDBEFILNEW;
	if (s == "dlgwdbenavloaini") return DLGWDBENAVLOAINI;
	if (s == "dlgwdbenavmnglic") return DLGWDBENAVMNGLIC;
	if (s == "dlgwdbeprjimpex") return DLGWDBEPRJIMPEX;
	if (s == "dlgwdbeprjnew") return DLGWDBEPRJNEW;
	if (s == "dlgwdberlsfinreptr") return DLGWDBERLSFINREPTR;
	if (s == "dlgwdberlsnew") return DLGWDBERLSNEW;
	if (s == "dlgwdberlsstareptr") return DLGWDBERLSSTAREPTR;
	if (s == "dlgwdberlswrite") return DLGWDBERLSWRITE;
	if (s == "dlgwdbeusrmngkeypair") return DLGWDBEUSRMNGKEYPAIR;
	if (s == "dlgwdbeutlextrip") return DLGWDBEUTLEXTRIP;
	if (s == "dlgwdbeutlmrgip") return DLGWDBEUTLMRGIP;
	if (s == "dlgwdbevercmdset") return DLGWDBEVERCMDSET;
	if (s == "dlgwdbevercustfst") return DLGWDBEVERCUSTFST;
	if (s == "dlgwdbeverdflalg") return DLGWDBEVERDFLALG;
	if (s == "dlgwdbeverfinmod") return DLGWDBEVERFINMOD;
	if (s == "dlgwdbevergenfst") return DLGWDBEVERGENFST;
	if (s == "dlgwdbevermdlstr") return DLGWDBEVERMDLSTR;
	if (s == "dlgwdbevernew") return DLGWDBEVERNEW;
	if (s == "jobwdbeiexbcd") return JOBWDBEIEXBCD;
	if (s == "jobwdbeiexcsx") return JOBWDBEIEXCSX;
	if (s == "jobwdbeiexdal") return JOBWDBEIEXDAL;
	if (s == "jobwdbeiexdcd") return JOBWDBEIEXDCD;
	if (s == "jobwdbeiexfin") return JOBWDBEIEXFIN;
	if (s == "jobwdbeiexini") return JOBWDBEIEXINI;
	if (s == "jobwdbeiexmdl") return JOBWDBEIEXMDL;
	if (s == "jobwdbeiexprj") return JOBWDBEIEXPRJ;
	if (s == "jobwdbelicense") return JOBWDBELICENSE;
	if (s == "pnlwdbebnk1npin") return PNLWDBEBNK1NPIN;
	if (s == "pnlwdbebnkdetail") return PNLWDBEBNKDETAIL;
	if (s == "pnlwdbebnkheadbar") return PNLWDBEBNKHEADBAR;
	if (s == "pnlwdbebnklist") return PNLWDBEBNKLIST;
	if (s == "pnlwdbebnkrec") return PNLWDBEBNKREC;
	if (s == "pnlwdbecmdainvpar") return PNLWDBECMDAINVPAR;
	if (s == "pnlwdbecmdaretpar") return PNLWDBECMDARETPAR;
	if (s == "pnlwdbecmddetail") return PNLWDBECMDDETAIL;
	if (s == "pnlwdbecmdheadbar") return PNLWDBECMDHEADBAR;
	if (s == "pnlwdbecmdlist") return PNLWDBECMDLIST;
	if (s == "pnlwdbecmdmncontroller") return PNLWDBECMDMNCONTROLLER;
	if (s == "pnlwdbecmdrec") return PNLWDBECMDREC;
	if (s == "pnlwdbecpr1ncoreversion") return PNLWDBECPR1NCOREVERSION;
	if (s == "pnlwdbecprdetail") return PNLWDBECPRDETAIL;
	if (s == "pnlwdbecprheadbar") return PNLWDBECPRHEADBAR;
	if (s == "pnlwdbecprlist") return PNLWDBECPRLIST;
	if (s == "pnlwdbecprmnperson") return PNLWDBECPRMNPERSON;
	if (s == "pnlwdbecprrec") return PNLWDBECPRREC;
	if (s == "pnlwdbecvraip") return PNLWDBECVRAIP;
	if (s == "pnlwdbecvraplh") return PNLWDBECVRAPLH;
	if (s == "pnlwdbecvrbcv1ncoreversion") return PNLWDBECVRBCV1NCOREVERSION;
	if (s == "pnlwdbecvrdetail") return PNLWDBECVRDETAIL;
	if (s == "pnlwdbecvrheadbar") return PNLWDBECVRHEADBAR;
	if (s == "pnlwdbecvrhk1nmodule") return PNLWDBECVRHK1NMODULE;
	if (s == "pnlwdbecvrlist") return PNLWDBECVRLIST;
	if (s == "pnlwdbecvrrec") return PNLWDBECVRREC;
	if (s == "pnlwdbeerrapar") return PNLWDBEERRAPAR;
	if (s == "pnlwdbeerrdetail") return PNLWDBEERRDETAIL;
	if (s == "pnlwdbeerrheadbar") return PNLWDBEERRHEADBAR;
	if (s == "pnlwdbeerrlist") return PNLWDBEERRLIST;
	if (s == "pnlwdbeerrrec") return PNLWDBEERRREC;
	if (s == "pnlwdbefam1nunit") return PNLWDBEFAM1NUNIT;
	if (s == "pnlwdbefamdetail") return PNLWDBEFAMDETAIL;
	if (s == "pnlwdbefamheadbar") return PNLWDBEFAMHEADBAR;
	if (s == "pnlwdbefamlist") return PNLWDBEFAMLIST;
	if (s == "pnlwdbefamrec") return PNLWDBEFAMREC;
	if (s == "pnlwdbefildetail") return PNLWDBEFILDETAIL;
	if (s == "pnlwdbefilheadbar") return PNLWDBEFILHEADBAR;
	if (s == "pnlwdbefillist") return PNLWDBEFILLIST;
	if (s == "pnlwdbefilrec") return PNLWDBEFILREC;
	if (s == "pnlwdbefstastep") return PNLWDBEFSTASTEP;
	if (s == "pnlwdbefstdetail") return PNLWDBEFSTDETAIL;
	if (s == "pnlwdbefstheadbar") return PNLWDBEFSTHEADBAR;
	if (s == "pnlwdbefstlist") return PNLWDBEFSTLIST;
	if (s == "pnlwdbefstrec") return PNLWDBEFSTREC;
	if (s == "pnlwdbegendetail") return PNLWDBEGENDETAIL;
	if (s == "pnlwdbegenheadbar") return PNLWDBEGENHEADBAR;
	if (s == "pnlwdbegenlist") return PNLWDBEGENLIST;
	if (s == "pnlwdbegenrec") return PNLWDBEGENREC;
	if (s == "pnlwdbeintdetail") return PNLWDBEINTDETAIL;
	if (s == "pnlwdbeintheadbar") return PNLWDBEINTHEADBAR;
	if (s == "pnlwdbeintlist") return PNLWDBEINTLIST;
	if (s == "pnlwdbeintrec") return PNLWDBEINTREC;
	if (s == "pnlwdbeintsrc1nsensitivity") return PNLWDBEINTSRC1NSENSITIVITY;
	if (s == "pnlwdbelibamakefile") return PNLWDBELIBAMAKEFILE;
	if (s == "pnlwdbelibdetail") return PNLWDBELIBDETAIL;
	if (s == "pnlwdbelibheadbar") return PNLWDBELIBHEADBAR;
	if (s == "pnlwdbeliblist") return PNLWDBELIBLIST;
	if (s == "pnlwdbelibmnversion") return PNLWDBELIBMNVERSION;
	if (s == "pnlwdbelibrec") return PNLWDBELIBREC;
	if (s == "pnlwdbemch1nrelease") return PNLWDBEMCH1NRELEASE;
	if (s == "pnlwdbemchamakefile") return PNLWDBEMCHAMAKEFILE;
	if (s == "pnlwdbemchapar") return PNLWDBEMCHAPAR;
	if (s == "pnlwdbemchdetail") return PNLWDBEMCHDETAIL;
	if (s == "pnlwdbemchheadbar") return PNLWDBEMCHHEADBAR;
	if (s == "pnlwdbemchlist") return PNLWDBEMCHLIST;
	if (s == "pnlwdbemchrec") return PNLWDBEMCHREC;
	if (s == "pnlwdbemchsup1nmachine") return PNLWDBEMCHSUP1NMACHINE;
	if (s == "pnlwdbemod1nprocess") return PNLWDBEMOD1NPROCESS;
	if (s == "pnlwdbemodapar") return PNLWDBEMODAPAR;
	if (s == "pnlwdbemodcormnmodule") return PNLWDBEMODCORMNMODULE;
	if (s == "pnlwdbemodctdmnmodule") return PNLWDBEMODCTDMNMODULE;
	if (s == "pnlwdbemodctrhk1nvector") return PNLWDBEMODCTRHK1NVECTOR;
	if (s == "pnlwdbemodctrmncommand") return PNLWDBEMODCTRMNCOMMAND;
	if (s == "pnlwdbemodctrref1ncommand") return PNLWDBEMODCTRREF1NCOMMAND;
	if (s == "pnlwdbemodctrref1nerror") return PNLWDBEMODCTRREF1NERROR;
	if (s == "pnlwdbemoddetail") return PNLWDBEMODDETAIL;
	if (s == "pnlwdbemodheadbar") return PNLWDBEMODHEADBAR;
	if (s == "pnlwdbemodhsm1npipeline") return PNLWDBEMODHSM1NPIPELINE;
	if (s == "pnlwdbemodkhdltype") return PNLWDBEMODKHDLTYPE;
	if (s == "pnlwdbemodlist") return PNLWDBEMODLIST;
	if (s == "pnlwdbemodmdl1ngeneric") return PNLWDBEMODMDL1NGENERIC;
	if (s == "pnlwdbemodmdl1nport") return PNLWDBEMODMDL1NPORT;
	if (s == "pnlwdbemodmge1nsignal") return PNLWDBEMODMGE1NSIGNAL;
	if (s == "pnlwdbemodmnperipheral") return PNLWDBEMODMNPERIPHERAL;
	if (s == "pnlwdbemodrec") return PNLWDBEMODREC;
	if (s == "pnlwdbemodref1nsensitivity") return PNLWDBEMODREF1NSENSITIVITY;
	if (s == "pnlwdbemodref1nsignal") return PNLWDBEMODREF1NSIGNAL;
	if (s == "pnlwdbemodref1nvariable") return PNLWDBEMODREF1NVARIABLE;
	if (s == "pnlwdbemodsup1nmodule") return PNLWDBEMODSUP1NMODULE;
	if (s == "pnlwdbemtpapar") return PNLWDBEMTPAPAR;
	if (s == "pnlwdbemtpdetail") return PNLWDBEMTPDETAIL;
	if (s == "pnlwdbemtpheadbar") return PNLWDBEMTPHEADBAR;
	if (s == "pnlwdbemtphsm1npipeline") return PNLWDBEMTPHSM1NPIPELINE;
	if (s == "pnlwdbemtpkhdltype") return PNLWDBEMTPKHDLTYPE;
	if (s == "pnlwdbemtpkparkey") return PNLWDBEMTPKPARKEY;
	if (s == "pnlwdbemtplist") return PNLWDBEMTPLIST;
	if (s == "pnlwdbemtpmdl1ngeneric") return PNLWDBEMTPMDL1NGENERIC;
	if (s == "pnlwdbemtpmdl1nport") return PNLWDBEMTPMDL1NPORT;
	if (s == "pnlwdbemtpmge1nsignal") return PNLWDBEMTPMGE1NSIGNAL;
	if (s == "pnlwdbemtprec") return PNLWDBEMTPREC;
	if (s == "pnlwdbemtpref1nfile") return PNLWDBEMTPREF1NFILE;
	if (s == "pnlwdbemtpref1nsensitivity") return PNLWDBEMTPREF1NSENSITIVITY;
	if (s == "pnlwdbemtpref1nvariable") return PNLWDBEMTPREF1NVARIABLE;
	if (s == "pnlwdbemtpsup1nmodule") return PNLWDBEMTPSUP1NMODULE;
	if (s == "pnlwdbemtptpl1nmodule") return PNLWDBEMTPTPL1NMODULE;
	if (s == "pnlwdbenavadmin") return PNLWDBENAVADMIN;
	if (s == "pnlwdbenavauxfct") return PNLWDBENAVAUXFCT;
	if (s == "pnlwdbenavcoredev") return PNLWDBENAVCOREDEV;
	if (s == "pnlwdbenavdevdev") return PNLWDBENAVDEVDEV;
	if (s == "pnlwdbenavglobal") return PNLWDBENAVGLOBAL;
	if (s == "pnlwdbenavheadbar") return PNLWDBENAVHEADBAR;
	if (s == "pnlwdbenavhigh") return PNLWDBENAVHIGH;
	if (s == "pnlwdbenavlow") return PNLWDBENAVLOW;
	if (s == "pnlwdbenavpre") return PNLWDBENAVPRE;
	if (s == "pnlwdbepinapar") return PNLWDBEPINAPAR;
	if (s == "pnlwdbepindetail") return PNLWDBEPINDETAIL;
	if (s == "pnlwdbepinheadbar") return PNLWDBEPINHEADBAR;
	if (s == "pnlwdbepinlist") return PNLWDBEPINLIST;
	if (s == "pnlwdbepinrec") return PNLWDBEPINREC;
	if (s == "pnlwdbepphapar") return PNLWDBEPPHAPAR;
	if (s == "pnlwdbepphdetail") return PNLWDBEPPHDETAIL;
	if (s == "pnlwdbepphheadbar") return PNLWDBEPPHHEADBAR;
	if (s == "pnlwdbepphlist") return PNLWDBEPPHLIST;
	if (s == "pnlwdbepphmnmodule") return PNLWDBEPPHMNMODULE;
	if (s == "pnlwdbepphrec") return PNLWDBEPPHREC;
	if (s == "pnlwdbeppldetail") return PNLWDBEPPLDETAIL;
	if (s == "pnlwdbepplheadbar") return PNLWDBEPPLHEADBAR;
	if (s == "pnlwdbeppllist") return PNLWDBEPPLLIST;
	if (s == "pnlwdbepplppl1nsegment") return PNLWDBEPPLPPL1NSEGMENT;
	if (s == "pnlwdbepplrec") return PNLWDBEPPLREC;
	if (s == "pnlwdbeprcdetail") return PNLWDBEPRCDETAIL;
	if (s == "pnlwdbeprcfsmfsm1nfsmstate") return PNLWDBEPRCFSMFSM1NFSMSTATE;
	if (s == "pnlwdbeprcheadbar") return PNLWDBEPRCHEADBAR;
	if (s == "pnlwdbeprckhdltype") return PNLWDBEPRCKHDLTYPE;
	if (s == "pnlwdbeprclist") return PNLWDBEPRCLIST;
	if (s == "pnlwdbeprcmge1nsignal") return PNLWDBEPRCMGE1NSIGNAL;
	if (s == "pnlwdbeprcrec") return PNLWDBEPRCREC;
	if (s == "pnlwdbeprcref1nsensitivity") return PNLWDBEPRCREF1NSENSITIVITY;
	if (s == "pnlwdbeprcref1nvariable") return PNLWDBEPRCREF1NVARIABLE;
	if (s == "pnlwdbeprjdetail") return PNLWDBEPRJDETAIL;
	if (s == "pnlwdbeprjheadbar") return PNLWDBEPRJHEADBAR;
	if (s == "pnlwdbeprjlist") return PNLWDBEPRJLIST;
	if (s == "pnlwdbeprjmnperson") return PNLWDBEPRJMNPERSON;
	if (s == "pnlwdbeprjprj1nversion") return PNLWDBEPRJPRJ1NVERSION;
	if (s == "pnlwdbeprjrec") return PNLWDBEPRJREC;
	if (s == "pnlwdbeprsadetail") return PNLWDBEPRSADETAIL;
	if (s == "pnlwdbeprsdetail") return PNLWDBEPRSDETAIL;
	if (s == "pnlwdbeprsheadbar") return PNLWDBEPRSHEADBAR;
	if (s == "pnlwdbeprslist") return PNLWDBEPRSLIST;
	if (s == "pnlwdbeprsmncoreproject") return PNLWDBEPRSMNCOREPROJECT;
	if (s == "pnlwdbeprsmnproject") return PNLWDBEPRSMNPROJECT;
	if (s == "pnlwdbeprsrec") return PNLWDBEPRSREC;
	if (s == "pnlwdbeprtdetail") return PNLWDBEPRTDETAIL;
	if (s == "pnlwdbeprtheadbar") return PNLWDBEPRTHEADBAR;
	if (s == "pnlwdbeprtlist") return PNLWDBEPRTLIST;
	if (s == "pnlwdbeprtrec") return PNLWDBEPRTREC;
	if (s == "pnlwdbeprtsrc1nsensitivity") return PNLWDBEPRTSRC1NSENSITIVITY;
	if (s == "pnlwdberlsdetail") return PNLWDBERLSDETAIL;
	if (s == "pnlwdberlsheadbar") return PNLWDBERLSHEADBAR;
	if (s == "pnlwdberlslist") return PNLWDBERLSLIST;
	if (s == "pnlwdberlsrec") return PNLWDBERLSREC;
	if (s == "pnlwdbesegdetail") return PNLWDBESEGDETAIL;
	if (s == "pnlwdbesegheadbar") return PNLWDBESEGHEADBAR;
	if (s == "pnlwdbeseglist") return PNLWDBESEGLIST;
	if (s == "pnlwdbesegrec") return PNLWDBESEGREC;
	if (s == "pnlwdbesegsup1nsegment") return PNLWDBESEGSUP1NSEGMENT;
	if (s == "pnlwdbesigdetail") return PNLWDBESIGDETAIL;
	if (s == "pnlwdbesigheadbar") return PNLWDBESIGHEADBAR;
	if (s == "pnlwdbesiglist") return PNLWDBESIGLIST;
	if (s == "pnlwdbesigrec") return PNLWDBESIGREC;
	if (s == "pnlwdbesigsrc1nsensitivity") return PNLWDBESIGSRC1NSENSITIVITY;
	if (s == "pnlwdbesil1nbank") return PNLWDBESIL1NBANK;
	if (s == "pnlwdbesil1ninterrupt") return PNLWDBESIL1NINTERRUPT;
	if (s == "pnlwdbesil1nperipheral") return PNLWDBESIL1NPERIPHERAL;
	if (s == "pnlwdbesil1ntarget") return PNLWDBESIL1NTARGET;
	if (s == "pnlwdbesildetail") return PNLWDBESILDETAIL;
	if (s == "pnlwdbesilfwd1ncontroller") return PNLWDBESILFWD1NCONTROLLER;
	if (s == "pnlwdbesilheadbar") return PNLWDBESILHEADBAR;
	if (s == "pnlwdbesilhk1nmodule") return PNLWDBESILHK1NMODULE;
	if (s == "pnlwdbesilhk1nvector") return PNLWDBESILHK1NVECTOR;
	if (s == "pnlwdbesillist") return PNLWDBESILLIST;
	if (s == "pnlwdbesilrec") return PNLWDBESILREC;
	if (s == "pnlwdbesilref1ncommand") return PNLWDBESILREF1NCOMMAND;
	if (s == "pnlwdbesilref1nerror") return PNLWDBESILREF1NERROR;
	if (s == "pnlwdbesilref1nsignal") return PNLWDBESILREF1NSIGNAL;
	if (s == "pnlwdbesilsil1nunit") return PNLWDBESILSIL1NUNIT;
	if (s == "pnlwdbesnsdetail") return PNLWDBESNSDETAIL;
	if (s == "pnlwdbesnsheadbar") return PNLWDBESNSHEADBAR;
	if (s == "pnlwdbesnslist") return PNLWDBESNSLIST;
	if (s == "pnlwdbesnsrec") return PNLWDBESNSREC;
	if (s == "pnlwdbesysdetail") return PNLWDBESYSDETAIL;
	if (s == "pnlwdbesysheadbar") return PNLWDBESYSHEADBAR;
	if (s == "pnlwdbesyshk1nvector") return PNLWDBESYSHK1NVECTOR;
	if (s == "pnlwdbesyslist") return PNLWDBESYSLIST;
	if (s == "pnlwdbesysrec") return PNLWDBESYSREC;
	if (s == "pnlwdbesyssys1ntarget") return PNLWDBESYSSYS1NTARGET;
	if (s == "pnlwdbetrgdetail") return PNLWDBETRGDETAIL;
	if (s == "pnlwdbetrgheadbar") return PNLWDBETRGHEADBAR;
	if (s == "pnlwdbetrglist") return PNLWDBETRGLIST;
	if (s == "pnlwdbetrgrec") return PNLWDBETRGREC;
	if (s == "pnlwdbeunt1nbank") return PNLWDBEUNT1NBANK;
	if (s == "pnlwdbeunt1ninterrupt") return PNLWDBEUNT1NINTERRUPT;
	if (s == "pnlwdbeunt1nperipheral") return PNLWDBEUNT1NPERIPHERAL;
	if (s == "pnlwdbeunt1ntarget") return PNLWDBEUNT1NTARGET;
	if (s == "pnlwdbeuntdetail") return PNLWDBEUNTDETAIL;
	if (s == "pnlwdbeuntfwd1ncontroller") return PNLWDBEUNTFWD1NCONTROLLER;
	if (s == "pnlwdbeuntheadbar") return PNLWDBEUNTHEADBAR;
	if (s == "pnlwdbeunthk1nmodule") return PNLWDBEUNTHK1NMODULE;
	if (s == "pnlwdbeunthk1nvector") return PNLWDBEUNTHK1NVECTOR;
	if (s == "pnlwdbeuntlist") return PNLWDBEUNTLIST;
	if (s == "pnlwdbeuntrec") return PNLWDBEUNTREC;
	if (s == "pnlwdbeuntref1ncommand") return PNLWDBEUNTREF1NCOMMAND;
	if (s == "pnlwdbeuntref1nerror") return PNLWDBEUNTREF1NERROR;
	if (s == "pnlwdbeuntref1nsignal") return PNLWDBEUNTREF1NSIGNAL;
	if (s == "pnlwdbeuntsil1nunit") return PNLWDBEUNTSIL1NUNIT;
	if (s == "pnlwdbeusgaaccess") return PNLWDBEUSGAACCESS;
	if (s == "pnlwdbeusgdetail") return PNLWDBEUSGDETAIL;
	if (s == "pnlwdbeusgheadbar") return PNLWDBEUSGHEADBAR;
	if (s == "pnlwdbeusglist") return PNLWDBEUSGLIST;
	if (s == "pnlwdbeusgmnuser") return PNLWDBEUSGMNUSER;
	if (s == "pnlwdbeusgrec") return PNLWDBEUSGREC;
	if (s == "pnlwdbeusr1nsession") return PNLWDBEUSR1NSESSION;
	if (s == "pnlwdbeusraaccess") return PNLWDBEUSRAACCESS;
	if (s == "pnlwdbeusrdetail") return PNLWDBEUSRDETAIL;
	if (s == "pnlwdbeusrheadbar") return PNLWDBEUSRHEADBAR;
	if (s == "pnlwdbeusrlist") return PNLWDBEUSRLIST;
	if (s == "pnlwdbeusrmnusergroup") return PNLWDBEUSRMNUSERGROUP;
	if (s == "pnlwdbeusrrec") return PNLWDBEUSRREC;
	if (s == "pnlwdbeutlheadbar") return PNLWDBEUTLHEADBAR;
	if (s == "pnlwdbevardetail") return PNLWDBEVARDETAIL;
	if (s == "pnlwdbevarheadbar") return PNLWDBEVARHEADBAR;
	if (s == "pnlwdbevarlist") return PNLWDBEVARLIST;
	if (s == "pnlwdbevarrec") return PNLWDBEVARREC;
	if (s == "pnlwdbevecdetail") return PNLWDBEVECDETAIL;
	if (s == "pnlwdbevecheadbar") return PNLWDBEVECHEADBAR;
	if (s == "pnlwdbeveclist") return PNLWDBEVECLIST;
	if (s == "pnlwdbevecrec") return PNLWDBEVECREC;
	if (s == "pnlwdbevecvec1nvectoritem") return PNLWDBEVECVEC1NVECTORITEM;
	if (s == "pnlwdbever1nrelease") return PNLWDBEVER1NRELEASE;
	if (s == "pnlwdbever1nsystem") return PNLWDBEVER1NSYSTEM;
	if (s == "pnlwdbever1nunit") return PNLWDBEVER1NUNIT;
	if (s == "pnlwdbeverbvr1nversion") return PNLWDBEVERBVR1NVERSION;
	if (s == "pnlwdbeverdetail") return PNLWDBEVERDETAIL;
	if (s == "pnlwdbeverheadbar") return PNLWDBEVERHEADBAR;
	if (s == "pnlwdbeverlist") return PNLWDBEVERLIST;
	if (s == "pnlwdbevermnlibrary") return PNLWDBEVERMNLIBRARY;
	if (s == "pnlwdbeverrec") return PNLWDBEVERREC;
	if (s == "pnlwdbeverref1nfile") return PNLWDBEVERREF1NFILE;
	if (s == "pnlwdbevitdetail") return PNLWDBEVITDETAIL;
	if (s == "pnlwdbevitheadbar") return PNLWDBEVITHEADBAR;
	if (s == "pnlwdbevitlist") return PNLWDBEVITLIST;
	if (s == "pnlwdbevitrec") return PNLWDBEVITREC;
	if (s == "qrywdbebnk1npin") return QRYWDBEBNK1NPIN;
	if (s == "qrywdbebnklist") return QRYWDBEBNKLIST;
	if (s == "qrywdbecmdainvpar") return QRYWDBECMDAINVPAR;
	if (s == "qrywdbecmdaretpar") return QRYWDBECMDARETPAR;
	if (s == "qrywdbecmdlist") return QRYWDBECMDLIST;
	if (s == "qrywdbecmdmncontroller") return QRYWDBECMDMNCONTROLLER;
	if (s == "qrywdbecpr1ncoreversion") return QRYWDBECPR1NCOREVERSION;
	if (s == "qrywdbecprlist") return QRYWDBECPRLIST;
	if (s == "qrywdbecprmnperson") return QRYWDBECPRMNPERSON;
	if (s == "qrywdbecvraip") return QRYWDBECVRAIP;
	if (s == "qrywdbecvraplh") return QRYWDBECVRAPLH;
	if (s == "qrywdbecvrbcv1ncoreversion") return QRYWDBECVRBCV1NCOREVERSION;
	if (s == "qrywdbecvrhk1nmodule") return QRYWDBECVRHK1NMODULE;
	if (s == "qrywdbecvrlist") return QRYWDBECVRLIST;
	if (s == "qrywdbeerrapar") return QRYWDBEERRAPAR;
	if (s == "qrywdbeerrlist") return QRYWDBEERRLIST;
	if (s == "qrywdbefam1nunit") return QRYWDBEFAM1NUNIT;
	if (s == "qrywdbefamlist") return QRYWDBEFAMLIST;
	if (s == "qrywdbefillist") return QRYWDBEFILLIST;
	if (s == "qrywdbefstastep") return QRYWDBEFSTASTEP;
	if (s == "qrywdbefstlist") return QRYWDBEFSTLIST;
	if (s == "qrywdbegenlist") return QRYWDBEGENLIST;
	if (s == "qrywdbeintlist") return QRYWDBEINTLIST;
	if (s == "qrywdbeintsrc1nsensitivity") return QRYWDBEINTSRC1NSENSITIVITY;
	if (s == "qrywdbelibamakefile") return QRYWDBELIBAMAKEFILE;
	if (s == "qrywdbeliblist") return QRYWDBELIBLIST;
	if (s == "qrywdbelibmnversion") return QRYWDBELIBMNVERSION;
	if (s == "qrywdbemch1nrelease") return QRYWDBEMCH1NRELEASE;
	if (s == "qrywdbemchamakefile") return QRYWDBEMCHAMAKEFILE;
	if (s == "qrywdbemchapar") return QRYWDBEMCHAPAR;
	if (s == "qrywdbemchlist") return QRYWDBEMCHLIST;
	if (s == "qrywdbemchsup1nmachine") return QRYWDBEMCHSUP1NMACHINE;
	if (s == "qrywdbemod1nprocess") return QRYWDBEMOD1NPROCESS;
	if (s == "qrywdbemodapar") return QRYWDBEMODAPAR;
	if (s == "qrywdbemodcormnmodule") return QRYWDBEMODCORMNMODULE;
	if (s == "qrywdbemodctdmnmodule") return QRYWDBEMODCTDMNMODULE;
	if (s == "qrywdbemodctrhk1nvector") return QRYWDBEMODCTRHK1NVECTOR;
	if (s == "qrywdbemodctrmncommand") return QRYWDBEMODCTRMNCOMMAND;
	if (s == "qrywdbemodctrref1ncommand") return QRYWDBEMODCTRREF1NCOMMAND;
	if (s == "qrywdbemodctrref1nerror") return QRYWDBEMODCTRREF1NERROR;
	if (s == "qrywdbemodhsm1npipeline") return QRYWDBEMODHSM1NPIPELINE;
	if (s == "qrywdbemodkhdltype") return QRYWDBEMODKHDLTYPE;
	if (s == "qrywdbemodlist") return QRYWDBEMODLIST;
	if (s == "qrywdbemodmdl1ngeneric") return QRYWDBEMODMDL1NGENERIC;
	if (s == "qrywdbemodmdl1nport") return QRYWDBEMODMDL1NPORT;
	if (s == "qrywdbemodmge1nsignal") return QRYWDBEMODMGE1NSIGNAL;
	if (s == "qrywdbemodmnperipheral") return QRYWDBEMODMNPERIPHERAL;
	if (s == "qrywdbemodref1nsensitivity") return QRYWDBEMODREF1NSENSITIVITY;
	if (s == "qrywdbemodref1nsignal") return QRYWDBEMODREF1NSIGNAL;
	if (s == "qrywdbemodref1nvariable") return QRYWDBEMODREF1NVARIABLE;
	if (s == "qrywdbemodsup1nmodule") return QRYWDBEMODSUP1NMODULE;
	if (s == "qrywdbemtpapar") return QRYWDBEMTPAPAR;
	if (s == "qrywdbemtphsm1npipeline") return QRYWDBEMTPHSM1NPIPELINE;
	if (s == "qrywdbemtpkhdltype") return QRYWDBEMTPKHDLTYPE;
	if (s == "qrywdbemtpkparkey") return QRYWDBEMTPKPARKEY;
	if (s == "qrywdbemtplist") return QRYWDBEMTPLIST;
	if (s == "qrywdbemtpmdl1ngeneric") return QRYWDBEMTPMDL1NGENERIC;
	if (s == "qrywdbemtpmdl1nport") return QRYWDBEMTPMDL1NPORT;
	if (s == "qrywdbemtpmge1nsignal") return QRYWDBEMTPMGE1NSIGNAL;
	if (s == "qrywdbemtpref1nfile") return QRYWDBEMTPREF1NFILE;
	if (s == "qrywdbemtpref1nsensitivity") return QRYWDBEMTPREF1NSENSITIVITY;
	if (s == "qrywdbemtpref1nvariable") return QRYWDBEMTPREF1NVARIABLE;
	if (s == "qrywdbemtpsup1nmodule") return QRYWDBEMTPSUP1NMODULE;
	if (s == "qrywdbemtptpl1nmodule") return QRYWDBEMTPTPL1NMODULE;
	if (s == "qrywdbepinapar") return QRYWDBEPINAPAR;
	if (s == "qrywdbepinlist") return QRYWDBEPINLIST;
	if (s == "qrywdbepphapar") return QRYWDBEPPHAPAR;
	if (s == "qrywdbepphlist") return QRYWDBEPPHLIST;
	if (s == "qrywdbepphmnmodule") return QRYWDBEPPHMNMODULE;
	if (s == "qrywdbeppllist") return QRYWDBEPPLLIST;
	if (s == "qrywdbepplppl1nsegment") return QRYWDBEPPLPPL1NSEGMENT;
	if (s == "qrywdbeprcfsmfsm1nfsmstate") return QRYWDBEPRCFSMFSM1NFSMSTATE;
	if (s == "qrywdbeprckhdltype") return QRYWDBEPRCKHDLTYPE;
	if (s == "qrywdbeprclist") return QRYWDBEPRCLIST;
	if (s == "qrywdbeprcmge1nsignal") return QRYWDBEPRCMGE1NSIGNAL;
	if (s == "qrywdbeprcref1nsensitivity") return QRYWDBEPRCREF1NSENSITIVITY;
	if (s == "qrywdbeprcref1nvariable") return QRYWDBEPRCREF1NVARIABLE;
	if (s == "qrywdbeprjlist") return QRYWDBEPRJLIST;
	if (s == "qrywdbeprjmnperson") return QRYWDBEPRJMNPERSON;
	if (s == "qrywdbeprjprj1nversion") return QRYWDBEPRJPRJ1NVERSION;
	if (s == "qrywdbeprsadetail") return QRYWDBEPRSADETAIL;
	if (s == "qrywdbeprslist") return QRYWDBEPRSLIST;
	if (s == "qrywdbeprsmncoreproject") return QRYWDBEPRSMNCOREPROJECT;
	if (s == "qrywdbeprsmnproject") return QRYWDBEPRSMNPROJECT;
	if (s == "qrywdbeprtlist") return QRYWDBEPRTLIST;
	if (s == "qrywdbeprtsrc1nsensitivity") return QRYWDBEPRTSRC1NSENSITIVITY;
	if (s == "qrywdberlslist") return QRYWDBERLSLIST;
	if (s == "qrywdbeseglist") return QRYWDBESEGLIST;
	if (s == "qrywdbesegsup1nsegment") return QRYWDBESEGSUP1NSEGMENT;
	if (s == "qrywdbesiglist") return QRYWDBESIGLIST;
	if (s == "qrywdbesigsrc1nsensitivity") return QRYWDBESIGSRC1NSENSITIVITY;
	if (s == "qrywdbesil1nbank") return QRYWDBESIL1NBANK;
	if (s == "qrywdbesil1ninterrupt") return QRYWDBESIL1NINTERRUPT;
	if (s == "qrywdbesil1nperipheral") return QRYWDBESIL1NPERIPHERAL;
	if (s == "qrywdbesil1ntarget") return QRYWDBESIL1NTARGET;
	if (s == "qrywdbesilfwd1ncontroller") return QRYWDBESILFWD1NCONTROLLER;
	if (s == "qrywdbesilhk1nmodule") return QRYWDBESILHK1NMODULE;
	if (s == "qrywdbesilhk1nvector") return QRYWDBESILHK1NVECTOR;
	if (s == "qrywdbesillist") return QRYWDBESILLIST;
	if (s == "qrywdbesilref1ncommand") return QRYWDBESILREF1NCOMMAND;
	if (s == "qrywdbesilref1nerror") return QRYWDBESILREF1NERROR;
	if (s == "qrywdbesilref1nsignal") return QRYWDBESILREF1NSIGNAL;
	if (s == "qrywdbesilsil1nunit") return QRYWDBESILSIL1NUNIT;
	if (s == "qrywdbesnslist") return QRYWDBESNSLIST;
	if (s == "qrywdbesyshk1nvector") return QRYWDBESYSHK1NVECTOR;
	if (s == "qrywdbesyslist") return QRYWDBESYSLIST;
	if (s == "qrywdbesyssys1ntarget") return QRYWDBESYSSYS1NTARGET;
	if (s == "qrywdbetrglist") return QRYWDBETRGLIST;
	if (s == "qrywdbeunt1nbank") return QRYWDBEUNT1NBANK;
	if (s == "qrywdbeunt1ninterrupt") return QRYWDBEUNT1NINTERRUPT;
	if (s == "qrywdbeunt1nperipheral") return QRYWDBEUNT1NPERIPHERAL;
	if (s == "qrywdbeunt1ntarget") return QRYWDBEUNT1NTARGET;
	if (s == "qrywdbeuntfwd1ncontroller") return QRYWDBEUNTFWD1NCONTROLLER;
	if (s == "qrywdbeunthk1nmodule") return QRYWDBEUNTHK1NMODULE;
	if (s == "qrywdbeunthk1nvector") return QRYWDBEUNTHK1NVECTOR;
	if (s == "qrywdbeuntlist") return QRYWDBEUNTLIST;
	if (s == "qrywdbeuntref1ncommand") return QRYWDBEUNTREF1NCOMMAND;
	if (s == "qrywdbeuntref1nerror") return QRYWDBEUNTREF1NERROR;
	if (s == "qrywdbeuntref1nsignal") return QRYWDBEUNTREF1NSIGNAL;
	if (s == "qrywdbeuntsil1nunit") return QRYWDBEUNTSIL1NUNIT;
	if (s == "qrywdbeusgaaccess") return QRYWDBEUSGAACCESS;
	if (s == "qrywdbeusglist") return QRYWDBEUSGLIST;
	if (s == "qrywdbeusgmnuser") return QRYWDBEUSGMNUSER;
	if (s == "qrywdbeusr1nsession") return QRYWDBEUSR1NSESSION;
	if (s == "qrywdbeusraaccess") return QRYWDBEUSRAACCESS;
	if (s == "qrywdbeusrlist") return QRYWDBEUSRLIST;
	if (s == "qrywdbeusrmnusergroup") return QRYWDBEUSRMNUSERGROUP;
	if (s == "qrywdbevarlist") return QRYWDBEVARLIST;
	if (s == "qrywdbeveclist") return QRYWDBEVECLIST;
	if (s == "qrywdbevecvec1nvectoritem") return QRYWDBEVECVEC1NVECTORITEM;
	if (s == "qrywdbever1nrelease") return QRYWDBEVER1NRELEASE;
	if (s == "qrywdbever1nsystem") return QRYWDBEVER1NSYSTEM;
	if (s == "qrywdbever1nunit") return QRYWDBEVER1NUNIT;
	if (s == "qrywdbeverbvr1nversion") return QRYWDBEVERBVR1NVERSION;
	if (s == "qrywdbeverlist") return QRYWDBEVERLIST;
	if (s == "qrywdbevermnlibrary") return QRYWDBEVERMNLIBRARY;
	if (s == "qrywdbeverref1nfile") return QRYWDBEVERREF1NFILE;
	if (s == "qrywdbevitlist") return QRYWDBEVITLIST;
	if (s == "rootwdbe") return ROOTWDBE;
	if (s == "sesswdbe") return SESSWDBE;

	return(0);
};

string VecWdbeVJob::getSref(
			const uint ix
		) {
	if (ix == CRDWDBEBNK) return("CrdWdbeBnk");
	if (ix == CRDWDBECMD) return("CrdWdbeCmd");
	if (ix == CRDWDBECPR) return("CrdWdbeCpr");
	if (ix == CRDWDBECVR) return("CrdWdbeCvr");
	if (ix == CRDWDBEERR) return("CrdWdbeErr");
	if (ix == CRDWDBEFAM) return("CrdWdbeFam");
	if (ix == CRDWDBEFIL) return("CrdWdbeFil");
	if (ix == CRDWDBEFST) return("CrdWdbeFst");
	if (ix == CRDWDBEGEN) return("CrdWdbeGen");
	if (ix == CRDWDBEINT) return("CrdWdbeInt");
	if (ix == CRDWDBELIB) return("CrdWdbeLib");
	if (ix == CRDWDBEMCH) return("CrdWdbeMch");
	if (ix == CRDWDBEMOD) return("CrdWdbeMod");
	if (ix == CRDWDBEMTP) return("CrdWdbeMtp");
	if (ix == CRDWDBENAV) return("CrdWdbeNav");
	if (ix == CRDWDBEPIN) return("CrdWdbePin");
	if (ix == CRDWDBEPPH) return("CrdWdbePph");
	if (ix == CRDWDBEPPL) return("CrdWdbePpl");
	if (ix == CRDWDBEPRC) return("CrdWdbePrc");
	if (ix == CRDWDBEPRJ) return("CrdWdbePrj");
	if (ix == CRDWDBEPRS) return("CrdWdbePrs");
	if (ix == CRDWDBEPRT) return("CrdWdbePrt");
	if (ix == CRDWDBERLS) return("CrdWdbeRls");
	if (ix == CRDWDBESEG) return("CrdWdbeSeg");
	if (ix == CRDWDBESIG) return("CrdWdbeSig");
	if (ix == CRDWDBESIL) return("CrdWdbeSil");
	if (ix == CRDWDBESNS) return("CrdWdbeSns");
	if (ix == CRDWDBESYS) return("CrdWdbeSys");
	if (ix == CRDWDBETRG) return("CrdWdbeTrg");
	if (ix == CRDWDBEUNT) return("CrdWdbeUnt");
	if (ix == CRDWDBEUSG) return("CrdWdbeUsg");
	if (ix == CRDWDBEUSR) return("CrdWdbeUsr");
	if (ix == CRDWDBEUTL) return("CrdWdbeUtl");
	if (ix == CRDWDBEVAR) return("CrdWdbeVar");
	if (ix == CRDWDBEVEC) return("CrdWdbeVec");
	if (ix == CRDWDBEVER) return("CrdWdbeVer");
	if (ix == CRDWDBEVIT) return("CrdWdbeVit");
	if (ix == DLGWDBECPRNEW) return("DlgWdbeCprNew");
	if (ix == DLGWDBECVRBSCCD) return("DlgWdbeCvrBsccd");
	if (ix == DLGWDBECVRDETCD) return("DlgWdbeCvrDetcd");
	if (ix == DLGWDBECVRNEW) return("DlgWdbeCvrNew");
	if (ix == DLGWDBECVRWRITE) return("DlgWdbeCvrWrite");
	if (ix == DLGWDBEFILDOWNLOAD) return("DlgWdbeFilDownload");
	if (ix == DLGWDBEFILNEW) return("DlgWdbeFilNew");
	if (ix == DLGWDBENAVLOAINI) return("DlgWdbeNavLoaini");
	if (ix == DLGWDBENAVMNGLIC) return("DlgWdbeNavMnglic");
	if (ix == DLGWDBEPRJIMPEX) return("DlgWdbePrjImpex");
	if (ix == DLGWDBEPRJNEW) return("DlgWdbePrjNew");
	if (ix == DLGWDBERLSFINREPTR) return("DlgWdbeRlsFinreptr");
	if (ix == DLGWDBERLSNEW) return("DlgWdbeRlsNew");
	if (ix == DLGWDBERLSSTAREPTR) return("DlgWdbeRlsStareptr");
	if (ix == DLGWDBERLSWRITE) return("DlgWdbeRlsWrite");
	if (ix == DLGWDBEUSRMNGKEYPAIR) return("DlgWdbeUsrMngkeypair");
	if (ix == DLGWDBEUTLEXTRIP) return("DlgWdbeUtlExtrip");
	if (ix == DLGWDBEUTLMRGIP) return("DlgWdbeUtlMrgip");
	if (ix == DLGWDBEVERCMDSET) return("DlgWdbeVerCmdset");
	if (ix == DLGWDBEVERCUSTFST) return("DlgWdbeVerCustfst");
	if (ix == DLGWDBEVERDFLALG) return("DlgWdbeVerDflalg");
	if (ix == DLGWDBEVERFINMOD) return("DlgWdbeVerFinmod");
	if (ix == DLGWDBEVERGENFST) return("DlgWdbeVerGenfst");
	if (ix == DLGWDBEVERMDLSTR) return("DlgWdbeVerMdlstr");
	if (ix == DLGWDBEVERNEW) return("DlgWdbeVerNew");
	if (ix == JOBWDBEIEXBCD) return("JobWdbeIexBcd");
	if (ix == JOBWDBEIEXCSX) return("JobWdbeIexCsx");
	if (ix == JOBWDBEIEXDAL) return("JobWdbeIexDal");
	if (ix == JOBWDBEIEXDCD) return("JobWdbeIexDcd");
	if (ix == JOBWDBEIEXFIN) return("JobWdbeIexFin");
	if (ix == JOBWDBEIEXINI) return("JobWdbeIexIni");
	if (ix == JOBWDBEIEXMDL) return("JobWdbeIexMdl");
	if (ix == JOBWDBEIEXPRJ) return("JobWdbeIexPrj");
	if (ix == JOBWDBELICENSE) return("JobWdbeLicense");
	if (ix == PNLWDBEBNK1NPIN) return("PnlWdbeBnk1NPin");
	if (ix == PNLWDBEBNKDETAIL) return("PnlWdbeBnkDetail");
	if (ix == PNLWDBEBNKHEADBAR) return("PnlWdbeBnkHeadbar");
	if (ix == PNLWDBEBNKLIST) return("PnlWdbeBnkList");
	if (ix == PNLWDBEBNKREC) return("PnlWdbeBnkRec");
	if (ix == PNLWDBECMDAINVPAR) return("PnlWdbeCmdAInvpar");
	if (ix == PNLWDBECMDARETPAR) return("PnlWdbeCmdARetpar");
	if (ix == PNLWDBECMDDETAIL) return("PnlWdbeCmdDetail");
	if (ix == PNLWDBECMDHEADBAR) return("PnlWdbeCmdHeadbar");
	if (ix == PNLWDBECMDLIST) return("PnlWdbeCmdList");
	if (ix == PNLWDBECMDMNCONTROLLER) return("PnlWdbeCmdMNController");
	if (ix == PNLWDBECMDREC) return("PnlWdbeCmdRec");
	if (ix == PNLWDBECPR1NCOREVERSION) return("PnlWdbeCpr1NCoreversion");
	if (ix == PNLWDBECPRDETAIL) return("PnlWdbeCprDetail");
	if (ix == PNLWDBECPRHEADBAR) return("PnlWdbeCprHeadbar");
	if (ix == PNLWDBECPRLIST) return("PnlWdbeCprList");
	if (ix == PNLWDBECPRMNPERSON) return("PnlWdbeCprMNPerson");
	if (ix == PNLWDBECPRREC) return("PnlWdbeCprRec");
	if (ix == PNLWDBECVRAIP) return("PnlWdbeCvrAIp");
	if (ix == PNLWDBECVRAPLH) return("PnlWdbeCvrAPlh");
	if (ix == PNLWDBECVRBCV1NCOREVERSION) return("PnlWdbeCvrBcv1NCoreversion");
	if (ix == PNLWDBECVRDETAIL) return("PnlWdbeCvrDetail");
	if (ix == PNLWDBECVRHEADBAR) return("PnlWdbeCvrHeadbar");
	if (ix == PNLWDBECVRHK1NMODULE) return("PnlWdbeCvrHk1NModule");
	if (ix == PNLWDBECVRLIST) return("PnlWdbeCvrList");
	if (ix == PNLWDBECVRREC) return("PnlWdbeCvrRec");
	if (ix == PNLWDBEERRAPAR) return("PnlWdbeErrAPar");
	if (ix == PNLWDBEERRDETAIL) return("PnlWdbeErrDetail");
	if (ix == PNLWDBEERRHEADBAR) return("PnlWdbeErrHeadbar");
	if (ix == PNLWDBEERRLIST) return("PnlWdbeErrList");
	if (ix == PNLWDBEERRREC) return("PnlWdbeErrRec");
	if (ix == PNLWDBEFAM1NUNIT) return("PnlWdbeFam1NUnit");
	if (ix == PNLWDBEFAMDETAIL) return("PnlWdbeFamDetail");
	if (ix == PNLWDBEFAMHEADBAR) return("PnlWdbeFamHeadbar");
	if (ix == PNLWDBEFAMLIST) return("PnlWdbeFamList");
	if (ix == PNLWDBEFAMREC) return("PnlWdbeFamRec");
	if (ix == PNLWDBEFILDETAIL) return("PnlWdbeFilDetail");
	if (ix == PNLWDBEFILHEADBAR) return("PnlWdbeFilHeadbar");
	if (ix == PNLWDBEFILLIST) return("PnlWdbeFilList");
	if (ix == PNLWDBEFILREC) return("PnlWdbeFilRec");
	if (ix == PNLWDBEFSTASTEP) return("PnlWdbeFstAStep");
	if (ix == PNLWDBEFSTDETAIL) return("PnlWdbeFstDetail");
	if (ix == PNLWDBEFSTHEADBAR) return("PnlWdbeFstHeadbar");
	if (ix == PNLWDBEFSTLIST) return("PnlWdbeFstList");
	if (ix == PNLWDBEFSTREC) return("PnlWdbeFstRec");
	if (ix == PNLWDBEGENDETAIL) return("PnlWdbeGenDetail");
	if (ix == PNLWDBEGENHEADBAR) return("PnlWdbeGenHeadbar");
	if (ix == PNLWDBEGENLIST) return("PnlWdbeGenList");
	if (ix == PNLWDBEGENREC) return("PnlWdbeGenRec");
	if (ix == PNLWDBEINTDETAIL) return("PnlWdbeIntDetail");
	if (ix == PNLWDBEINTHEADBAR) return("PnlWdbeIntHeadbar");
	if (ix == PNLWDBEINTLIST) return("PnlWdbeIntList");
	if (ix == PNLWDBEINTREC) return("PnlWdbeIntRec");
	if (ix == PNLWDBEINTSRC1NSENSITIVITY) return("PnlWdbeIntSrc1NSensitivity");
	if (ix == PNLWDBELIBAMAKEFILE) return("PnlWdbeLibAMakefile");
	if (ix == PNLWDBELIBDETAIL) return("PnlWdbeLibDetail");
	if (ix == PNLWDBELIBHEADBAR) return("PnlWdbeLibHeadbar");
	if (ix == PNLWDBELIBLIST) return("PnlWdbeLibList");
	if (ix == PNLWDBELIBMNVERSION) return("PnlWdbeLibMNVersion");
	if (ix == PNLWDBELIBREC) return("PnlWdbeLibRec");
	if (ix == PNLWDBEMCH1NRELEASE) return("PnlWdbeMch1NRelease");
	if (ix == PNLWDBEMCHAMAKEFILE) return("PnlWdbeMchAMakefile");
	if (ix == PNLWDBEMCHAPAR) return("PnlWdbeMchAPar");
	if (ix == PNLWDBEMCHDETAIL) return("PnlWdbeMchDetail");
	if (ix == PNLWDBEMCHHEADBAR) return("PnlWdbeMchHeadbar");
	if (ix == PNLWDBEMCHLIST) return("PnlWdbeMchList");
	if (ix == PNLWDBEMCHREC) return("PnlWdbeMchRec");
	if (ix == PNLWDBEMCHSUP1NMACHINE) return("PnlWdbeMchSup1NMachine");
	if (ix == PNLWDBEMOD1NPROCESS) return("PnlWdbeMod1NProcess");
	if (ix == PNLWDBEMODAPAR) return("PnlWdbeModAPar");
	if (ix == PNLWDBEMODCORMNMODULE) return("PnlWdbeModCorMNModule");
	if (ix == PNLWDBEMODCTDMNMODULE) return("PnlWdbeModCtdMNModule");
	if (ix == PNLWDBEMODCTRHK1NVECTOR) return("PnlWdbeModCtrHk1NVector");
	if (ix == PNLWDBEMODCTRMNCOMMAND) return("PnlWdbeModCtrMNCommand");
	if (ix == PNLWDBEMODCTRREF1NCOMMAND) return("PnlWdbeModCtrRef1NCommand");
	if (ix == PNLWDBEMODCTRREF1NERROR) return("PnlWdbeModCtrRef1NError");
	if (ix == PNLWDBEMODDETAIL) return("PnlWdbeModDetail");
	if (ix == PNLWDBEMODHEADBAR) return("PnlWdbeModHeadbar");
	if (ix == PNLWDBEMODHSM1NPIPELINE) return("PnlWdbeModHsm1NPipeline");
	if (ix == PNLWDBEMODKHDLTYPE) return("PnlWdbeModKHdltype");
	if (ix == PNLWDBEMODLIST) return("PnlWdbeModList");
	if (ix == PNLWDBEMODMDL1NGENERIC) return("PnlWdbeModMdl1NGeneric");
	if (ix == PNLWDBEMODMDL1NPORT) return("PnlWdbeModMdl1NPort");
	if (ix == PNLWDBEMODMGE1NSIGNAL) return("PnlWdbeModMge1NSignal");
	if (ix == PNLWDBEMODMNPERIPHERAL) return("PnlWdbeModMNPeripheral");
	if (ix == PNLWDBEMODREC) return("PnlWdbeModRec");
	if (ix == PNLWDBEMODREF1NSENSITIVITY) return("PnlWdbeModRef1NSensitivity");
	if (ix == PNLWDBEMODREF1NSIGNAL) return("PnlWdbeModRef1NSignal");
	if (ix == PNLWDBEMODREF1NVARIABLE) return("PnlWdbeModRef1NVariable");
	if (ix == PNLWDBEMODSUP1NMODULE) return("PnlWdbeModSup1NModule");
	if (ix == PNLWDBEMTPAPAR) return("PnlWdbeMtpAPar");
	if (ix == PNLWDBEMTPDETAIL) return("PnlWdbeMtpDetail");
	if (ix == PNLWDBEMTPHEADBAR) return("PnlWdbeMtpHeadbar");
	if (ix == PNLWDBEMTPHSM1NPIPELINE) return("PnlWdbeMtpHsm1NPipeline");
	if (ix == PNLWDBEMTPKHDLTYPE) return("PnlWdbeMtpKHdltype");
	if (ix == PNLWDBEMTPKPARKEY) return("PnlWdbeMtpKParKey");
	if (ix == PNLWDBEMTPLIST) return("PnlWdbeMtpList");
	if (ix == PNLWDBEMTPMDL1NGENERIC) return("PnlWdbeMtpMdl1NGeneric");
	if (ix == PNLWDBEMTPMDL1NPORT) return("PnlWdbeMtpMdl1NPort");
	if (ix == PNLWDBEMTPMGE1NSIGNAL) return("PnlWdbeMtpMge1NSignal");
	if (ix == PNLWDBEMTPREC) return("PnlWdbeMtpRec");
	if (ix == PNLWDBEMTPREF1NFILE) return("PnlWdbeMtpRef1NFile");
	if (ix == PNLWDBEMTPREF1NSENSITIVITY) return("PnlWdbeMtpRef1NSensitivity");
	if (ix == PNLWDBEMTPREF1NVARIABLE) return("PnlWdbeMtpRef1NVariable");
	if (ix == PNLWDBEMTPSUP1NMODULE) return("PnlWdbeMtpSup1NModule");
	if (ix == PNLWDBEMTPTPL1NMODULE) return("PnlWdbeMtpTpl1NModule");
	if (ix == PNLWDBENAVADMIN) return("PnlWdbeNavAdmin");
	if (ix == PNLWDBENAVAUXFCT) return("PnlWdbeNavAuxfct");
	if (ix == PNLWDBENAVCOREDEV) return("PnlWdbeNavCoredev");
	if (ix == PNLWDBENAVDEVDEV) return("PnlWdbeNavDevdev");
	if (ix == PNLWDBENAVGLOBAL) return("PnlWdbeNavGlobal");
	if (ix == PNLWDBENAVHEADBAR) return("PnlWdbeNavHeadbar");
	if (ix == PNLWDBENAVHIGH) return("PnlWdbeNavHigh");
	if (ix == PNLWDBENAVLOW) return("PnlWdbeNavLow");
	if (ix == PNLWDBENAVPRE) return("PnlWdbeNavPre");
	if (ix == PNLWDBEPINAPAR) return("PnlWdbePinAPar");
	if (ix == PNLWDBEPINDETAIL) return("PnlWdbePinDetail");
	if (ix == PNLWDBEPINHEADBAR) return("PnlWdbePinHeadbar");
	if (ix == PNLWDBEPINLIST) return("PnlWdbePinList");
	if (ix == PNLWDBEPINREC) return("PnlWdbePinRec");
	if (ix == PNLWDBEPPHAPAR) return("PnlWdbePphAPar");
	if (ix == PNLWDBEPPHDETAIL) return("PnlWdbePphDetail");
	if (ix == PNLWDBEPPHHEADBAR) return("PnlWdbePphHeadbar");
	if (ix == PNLWDBEPPHLIST) return("PnlWdbePphList");
	if (ix == PNLWDBEPPHMNMODULE) return("PnlWdbePphMNModule");
	if (ix == PNLWDBEPPHREC) return("PnlWdbePphRec");
	if (ix == PNLWDBEPPLDETAIL) return("PnlWdbePplDetail");
	if (ix == PNLWDBEPPLHEADBAR) return("PnlWdbePplHeadbar");
	if (ix == PNLWDBEPPLLIST) return("PnlWdbePplList");
	if (ix == PNLWDBEPPLPPL1NSEGMENT) return("PnlWdbePplPpl1NSegment");
	if (ix == PNLWDBEPPLREC) return("PnlWdbePplRec");
	if (ix == PNLWDBEPRCDETAIL) return("PnlWdbePrcDetail");
	if (ix == PNLWDBEPRCFSMFSM1NFSMSTATE) return("PnlWdbePrcFsmFsm1NFsmstate");
	if (ix == PNLWDBEPRCHEADBAR) return("PnlWdbePrcHeadbar");
	if (ix == PNLWDBEPRCKHDLTYPE) return("PnlWdbePrcKHdltype");
	if (ix == PNLWDBEPRCLIST) return("PnlWdbePrcList");
	if (ix == PNLWDBEPRCMGE1NSIGNAL) return("PnlWdbePrcMge1NSignal");
	if (ix == PNLWDBEPRCREC) return("PnlWdbePrcRec");
	if (ix == PNLWDBEPRCREF1NSENSITIVITY) return("PnlWdbePrcRef1NSensitivity");
	if (ix == PNLWDBEPRCREF1NVARIABLE) return("PnlWdbePrcRef1NVariable");
	if (ix == PNLWDBEPRJDETAIL) return("PnlWdbePrjDetail");
	if (ix == PNLWDBEPRJHEADBAR) return("PnlWdbePrjHeadbar");
	if (ix == PNLWDBEPRJLIST) return("PnlWdbePrjList");
	if (ix == PNLWDBEPRJMNPERSON) return("PnlWdbePrjMNPerson");
	if (ix == PNLWDBEPRJPRJ1NVERSION) return("PnlWdbePrjPrj1NVersion");
	if (ix == PNLWDBEPRJREC) return("PnlWdbePrjRec");
	if (ix == PNLWDBEPRSADETAIL) return("PnlWdbePrsADetail");
	if (ix == PNLWDBEPRSDETAIL) return("PnlWdbePrsDetail");
	if (ix == PNLWDBEPRSHEADBAR) return("PnlWdbePrsHeadbar");
	if (ix == PNLWDBEPRSLIST) return("PnlWdbePrsList");
	if (ix == PNLWDBEPRSMNCOREPROJECT) return("PnlWdbePrsMNCoreproject");
	if (ix == PNLWDBEPRSMNPROJECT) return("PnlWdbePrsMNProject");
	if (ix == PNLWDBEPRSREC) return("PnlWdbePrsRec");
	if (ix == PNLWDBEPRTDETAIL) return("PnlWdbePrtDetail");
	if (ix == PNLWDBEPRTHEADBAR) return("PnlWdbePrtHeadbar");
	if (ix == PNLWDBEPRTLIST) return("PnlWdbePrtList");
	if (ix == PNLWDBEPRTREC) return("PnlWdbePrtRec");
	if (ix == PNLWDBEPRTSRC1NSENSITIVITY) return("PnlWdbePrtSrc1NSensitivity");
	if (ix == PNLWDBERLSDETAIL) return("PnlWdbeRlsDetail");
	if (ix == PNLWDBERLSHEADBAR) return("PnlWdbeRlsHeadbar");
	if (ix == PNLWDBERLSLIST) return("PnlWdbeRlsList");
	if (ix == PNLWDBERLSREC) return("PnlWdbeRlsRec");
	if (ix == PNLWDBESEGDETAIL) return("PnlWdbeSegDetail");
	if (ix == PNLWDBESEGHEADBAR) return("PnlWdbeSegHeadbar");
	if (ix == PNLWDBESEGLIST) return("PnlWdbeSegList");
	if (ix == PNLWDBESEGREC) return("PnlWdbeSegRec");
	if (ix == PNLWDBESEGSUP1NSEGMENT) return("PnlWdbeSegSup1NSegment");
	if (ix == PNLWDBESIGDETAIL) return("PnlWdbeSigDetail");
	if (ix == PNLWDBESIGHEADBAR) return("PnlWdbeSigHeadbar");
	if (ix == PNLWDBESIGLIST) return("PnlWdbeSigList");
	if (ix == PNLWDBESIGREC) return("PnlWdbeSigRec");
	if (ix == PNLWDBESIGSRC1NSENSITIVITY) return("PnlWdbeSigSrc1NSensitivity");
	if (ix == PNLWDBESIL1NBANK) return("PnlWdbeSil1NBank");
	if (ix == PNLWDBESIL1NINTERRUPT) return("PnlWdbeSil1NInterrupt");
	if (ix == PNLWDBESIL1NPERIPHERAL) return("PnlWdbeSil1NPeripheral");
	if (ix == PNLWDBESIL1NTARGET) return("PnlWdbeSil1NTarget");
	if (ix == PNLWDBESILDETAIL) return("PnlWdbeSilDetail");
	if (ix == PNLWDBESILFWD1NCONTROLLER) return("PnlWdbeSilFwd1NController");
	if (ix == PNLWDBESILHEADBAR) return("PnlWdbeSilHeadbar");
	if (ix == PNLWDBESILHK1NMODULE) return("PnlWdbeSilHk1NModule");
	if (ix == PNLWDBESILHK1NVECTOR) return("PnlWdbeSilHk1NVector");
	if (ix == PNLWDBESILLIST) return("PnlWdbeSilList");
	if (ix == PNLWDBESILREC) return("PnlWdbeSilRec");
	if (ix == PNLWDBESILREF1NCOMMAND) return("PnlWdbeSilRef1NCommand");
	if (ix == PNLWDBESILREF1NERROR) return("PnlWdbeSilRef1NError");
	if (ix == PNLWDBESILREF1NSIGNAL) return("PnlWdbeSilRef1NSignal");
	if (ix == PNLWDBESILSIL1NUNIT) return("PnlWdbeSilSil1NUnit");
	if (ix == PNLWDBESNSDETAIL) return("PnlWdbeSnsDetail");
	if (ix == PNLWDBESNSHEADBAR) return("PnlWdbeSnsHeadbar");
	if (ix == PNLWDBESNSLIST) return("PnlWdbeSnsList");
	if (ix == PNLWDBESNSREC) return("PnlWdbeSnsRec");
	if (ix == PNLWDBESYSDETAIL) return("PnlWdbeSysDetail");
	if (ix == PNLWDBESYSHEADBAR) return("PnlWdbeSysHeadbar");
	if (ix == PNLWDBESYSHK1NVECTOR) return("PnlWdbeSysHk1NVector");
	if (ix == PNLWDBESYSLIST) return("PnlWdbeSysList");
	if (ix == PNLWDBESYSREC) return("PnlWdbeSysRec");
	if (ix == PNLWDBESYSSYS1NTARGET) return("PnlWdbeSysSys1NTarget");
	if (ix == PNLWDBETRGDETAIL) return("PnlWdbeTrgDetail");
	if (ix == PNLWDBETRGHEADBAR) return("PnlWdbeTrgHeadbar");
	if (ix == PNLWDBETRGLIST) return("PnlWdbeTrgList");
	if (ix == PNLWDBETRGREC) return("PnlWdbeTrgRec");
	if (ix == PNLWDBEUNT1NBANK) return("PnlWdbeUnt1NBank");
	if (ix == PNLWDBEUNT1NINTERRUPT) return("PnlWdbeUnt1NInterrupt");
	if (ix == PNLWDBEUNT1NPERIPHERAL) return("PnlWdbeUnt1NPeripheral");
	if (ix == PNLWDBEUNT1NTARGET) return("PnlWdbeUnt1NTarget");
	if (ix == PNLWDBEUNTDETAIL) return("PnlWdbeUntDetail");
	if (ix == PNLWDBEUNTFWD1NCONTROLLER) return("PnlWdbeUntFwd1NController");
	if (ix == PNLWDBEUNTHEADBAR) return("PnlWdbeUntHeadbar");
	if (ix == PNLWDBEUNTHK1NMODULE) return("PnlWdbeUntHk1NModule");
	if (ix == PNLWDBEUNTHK1NVECTOR) return("PnlWdbeUntHk1NVector");
	if (ix == PNLWDBEUNTLIST) return("PnlWdbeUntList");
	if (ix == PNLWDBEUNTREC) return("PnlWdbeUntRec");
	if (ix == PNLWDBEUNTREF1NCOMMAND) return("PnlWdbeUntRef1NCommand");
	if (ix == PNLWDBEUNTREF1NERROR) return("PnlWdbeUntRef1NError");
	if (ix == PNLWDBEUNTREF1NSIGNAL) return("PnlWdbeUntRef1NSignal");
	if (ix == PNLWDBEUNTSIL1NUNIT) return("PnlWdbeUntSil1NUnit");
	if (ix == PNLWDBEUSGAACCESS) return("PnlWdbeUsgAAccess");
	if (ix == PNLWDBEUSGDETAIL) return("PnlWdbeUsgDetail");
	if (ix == PNLWDBEUSGHEADBAR) return("PnlWdbeUsgHeadbar");
	if (ix == PNLWDBEUSGLIST) return("PnlWdbeUsgList");
	if (ix == PNLWDBEUSGMNUSER) return("PnlWdbeUsgMNUser");
	if (ix == PNLWDBEUSGREC) return("PnlWdbeUsgRec");
	if (ix == PNLWDBEUSR1NSESSION) return("PnlWdbeUsr1NSession");
	if (ix == PNLWDBEUSRAACCESS) return("PnlWdbeUsrAAccess");
	if (ix == PNLWDBEUSRDETAIL) return("PnlWdbeUsrDetail");
	if (ix == PNLWDBEUSRHEADBAR) return("PnlWdbeUsrHeadbar");
	if (ix == PNLWDBEUSRLIST) return("PnlWdbeUsrList");
	if (ix == PNLWDBEUSRMNUSERGROUP) return("PnlWdbeUsrMNUsergroup");
	if (ix == PNLWDBEUSRREC) return("PnlWdbeUsrRec");
	if (ix == PNLWDBEUTLHEADBAR) return("PnlWdbeUtlHeadbar");
	if (ix == PNLWDBEVARDETAIL) return("PnlWdbeVarDetail");
	if (ix == PNLWDBEVARHEADBAR) return("PnlWdbeVarHeadbar");
	if (ix == PNLWDBEVARLIST) return("PnlWdbeVarList");
	if (ix == PNLWDBEVARREC) return("PnlWdbeVarRec");
	if (ix == PNLWDBEVECDETAIL) return("PnlWdbeVecDetail");
	if (ix == PNLWDBEVECHEADBAR) return("PnlWdbeVecHeadbar");
	if (ix == PNLWDBEVECLIST) return("PnlWdbeVecList");
	if (ix == PNLWDBEVECREC) return("PnlWdbeVecRec");
	if (ix == PNLWDBEVECVEC1NVECTORITEM) return("PnlWdbeVecVec1NVectoritem");
	if (ix == PNLWDBEVER1NRELEASE) return("PnlWdbeVer1NRelease");
	if (ix == PNLWDBEVER1NSYSTEM) return("PnlWdbeVer1NSystem");
	if (ix == PNLWDBEVER1NUNIT) return("PnlWdbeVer1NUnit");
	if (ix == PNLWDBEVERBVR1NVERSION) return("PnlWdbeVerBvr1NVersion");
	if (ix == PNLWDBEVERDETAIL) return("PnlWdbeVerDetail");
	if (ix == PNLWDBEVERHEADBAR) return("PnlWdbeVerHeadbar");
	if (ix == PNLWDBEVERLIST) return("PnlWdbeVerList");
	if (ix == PNLWDBEVERMNLIBRARY) return("PnlWdbeVerMNLibrary");
	if (ix == PNLWDBEVERREC) return("PnlWdbeVerRec");
	if (ix == PNLWDBEVERREF1NFILE) return("PnlWdbeVerRef1NFile");
	if (ix == PNLWDBEVITDETAIL) return("PnlWdbeVitDetail");
	if (ix == PNLWDBEVITHEADBAR) return("PnlWdbeVitHeadbar");
	if (ix == PNLWDBEVITLIST) return("PnlWdbeVitList");
	if (ix == PNLWDBEVITREC) return("PnlWdbeVitRec");
	if (ix == QRYWDBEBNK1NPIN) return("QryWdbeBnk1NPin");
	if (ix == QRYWDBEBNKLIST) return("QryWdbeBnkList");
	if (ix == QRYWDBECMDAINVPAR) return("QryWdbeCmdAInvpar");
	if (ix == QRYWDBECMDARETPAR) return("QryWdbeCmdARetpar");
	if (ix == QRYWDBECMDLIST) return("QryWdbeCmdList");
	if (ix == QRYWDBECMDMNCONTROLLER) return("QryWdbeCmdMNController");
	if (ix == QRYWDBECPR1NCOREVERSION) return("QryWdbeCpr1NCoreversion");
	if (ix == QRYWDBECPRLIST) return("QryWdbeCprList");
	if (ix == QRYWDBECPRMNPERSON) return("QryWdbeCprMNPerson");
	if (ix == QRYWDBECVRAIP) return("QryWdbeCvrAIp");
	if (ix == QRYWDBECVRAPLH) return("QryWdbeCvrAPlh");
	if (ix == QRYWDBECVRBCV1NCOREVERSION) return("QryWdbeCvrBcv1NCoreversion");
	if (ix == QRYWDBECVRHK1NMODULE) return("QryWdbeCvrHk1NModule");
	if (ix == QRYWDBECVRLIST) return("QryWdbeCvrList");
	if (ix == QRYWDBEERRAPAR) return("QryWdbeErrAPar");
	if (ix == QRYWDBEERRLIST) return("QryWdbeErrList");
	if (ix == QRYWDBEFAM1NUNIT) return("QryWdbeFam1NUnit");
	if (ix == QRYWDBEFAMLIST) return("QryWdbeFamList");
	if (ix == QRYWDBEFILLIST) return("QryWdbeFilList");
	if (ix == QRYWDBEFSTASTEP) return("QryWdbeFstAStep");
	if (ix == QRYWDBEFSTLIST) return("QryWdbeFstList");
	if (ix == QRYWDBEGENLIST) return("QryWdbeGenList");
	if (ix == QRYWDBEINTLIST) return("QryWdbeIntList");
	if (ix == QRYWDBEINTSRC1NSENSITIVITY) return("QryWdbeIntSrc1NSensitivity");
	if (ix == QRYWDBELIBAMAKEFILE) return("QryWdbeLibAMakefile");
	if (ix == QRYWDBELIBLIST) return("QryWdbeLibList");
	if (ix == QRYWDBELIBMNVERSION) return("QryWdbeLibMNVersion");
	if (ix == QRYWDBEMCH1NRELEASE) return("QryWdbeMch1NRelease");
	if (ix == QRYWDBEMCHAMAKEFILE) return("QryWdbeMchAMakefile");
	if (ix == QRYWDBEMCHAPAR) return("QryWdbeMchAPar");
	if (ix == QRYWDBEMCHLIST) return("QryWdbeMchList");
	if (ix == QRYWDBEMCHSUP1NMACHINE) return("QryWdbeMchSup1NMachine");
	if (ix == QRYWDBEMOD1NPROCESS) return("QryWdbeMod1NProcess");
	if (ix == QRYWDBEMODAPAR) return("QryWdbeModAPar");
	if (ix == QRYWDBEMODCORMNMODULE) return("QryWdbeModCorMNModule");
	if (ix == QRYWDBEMODCTDMNMODULE) return("QryWdbeModCtdMNModule");
	if (ix == QRYWDBEMODCTRHK1NVECTOR) return("QryWdbeModCtrHk1NVector");
	if (ix == QRYWDBEMODCTRMNCOMMAND) return("QryWdbeModCtrMNCommand");
	if (ix == QRYWDBEMODCTRREF1NCOMMAND) return("QryWdbeModCtrRef1NCommand");
	if (ix == QRYWDBEMODCTRREF1NERROR) return("QryWdbeModCtrRef1NError");
	if (ix == QRYWDBEMODHSM1NPIPELINE) return("QryWdbeModHsm1NPipeline");
	if (ix == QRYWDBEMODKHDLTYPE) return("QryWdbeModKHdltype");
	if (ix == QRYWDBEMODLIST) return("QryWdbeModList");
	if (ix == QRYWDBEMODMDL1NGENERIC) return("QryWdbeModMdl1NGeneric");
	if (ix == QRYWDBEMODMDL1NPORT) return("QryWdbeModMdl1NPort");
	if (ix == QRYWDBEMODMGE1NSIGNAL) return("QryWdbeModMge1NSignal");
	if (ix == QRYWDBEMODMNPERIPHERAL) return("QryWdbeModMNPeripheral");
	if (ix == QRYWDBEMODREF1NSENSITIVITY) return("QryWdbeModRef1NSensitivity");
	if (ix == QRYWDBEMODREF1NSIGNAL) return("QryWdbeModRef1NSignal");
	if (ix == QRYWDBEMODREF1NVARIABLE) return("QryWdbeModRef1NVariable");
	if (ix == QRYWDBEMODSUP1NMODULE) return("QryWdbeModSup1NModule");
	if (ix == QRYWDBEMTPAPAR) return("QryWdbeMtpAPar");
	if (ix == QRYWDBEMTPHSM1NPIPELINE) return("QryWdbeMtpHsm1NPipeline");
	if (ix == QRYWDBEMTPKHDLTYPE) return("QryWdbeMtpKHdltype");
	if (ix == QRYWDBEMTPKPARKEY) return("QryWdbeMtpKParKey");
	if (ix == QRYWDBEMTPLIST) return("QryWdbeMtpList");
	if (ix == QRYWDBEMTPMDL1NGENERIC) return("QryWdbeMtpMdl1NGeneric");
	if (ix == QRYWDBEMTPMDL1NPORT) return("QryWdbeMtpMdl1NPort");
	if (ix == QRYWDBEMTPMGE1NSIGNAL) return("QryWdbeMtpMge1NSignal");
	if (ix == QRYWDBEMTPREF1NFILE) return("QryWdbeMtpRef1NFile");
	if (ix == QRYWDBEMTPREF1NSENSITIVITY) return("QryWdbeMtpRef1NSensitivity");
	if (ix == QRYWDBEMTPREF1NVARIABLE) return("QryWdbeMtpRef1NVariable");
	if (ix == QRYWDBEMTPSUP1NMODULE) return("QryWdbeMtpSup1NModule");
	if (ix == QRYWDBEMTPTPL1NMODULE) return("QryWdbeMtpTpl1NModule");
	if (ix == QRYWDBEPINAPAR) return("QryWdbePinAPar");
	if (ix == QRYWDBEPINLIST) return("QryWdbePinList");
	if (ix == QRYWDBEPPHAPAR) return("QryWdbePphAPar");
	if (ix == QRYWDBEPPHLIST) return("QryWdbePphList");
	if (ix == QRYWDBEPPHMNMODULE) return("QryWdbePphMNModule");
	if (ix == QRYWDBEPPLLIST) return("QryWdbePplList");
	if (ix == QRYWDBEPPLPPL1NSEGMENT) return("QryWdbePplPpl1NSegment");
	if (ix == QRYWDBEPRCFSMFSM1NFSMSTATE) return("QryWdbePrcFsmFsm1NFsmstate");
	if (ix == QRYWDBEPRCKHDLTYPE) return("QryWdbePrcKHdltype");
	if (ix == QRYWDBEPRCLIST) return("QryWdbePrcList");
	if (ix == QRYWDBEPRCMGE1NSIGNAL) return("QryWdbePrcMge1NSignal");
	if (ix == QRYWDBEPRCREF1NSENSITIVITY) return("QryWdbePrcRef1NSensitivity");
	if (ix == QRYWDBEPRCREF1NVARIABLE) return("QryWdbePrcRef1NVariable");
	if (ix == QRYWDBEPRJLIST) return("QryWdbePrjList");
	if (ix == QRYWDBEPRJMNPERSON) return("QryWdbePrjMNPerson");
	if (ix == QRYWDBEPRJPRJ1NVERSION) return("QryWdbePrjPrj1NVersion");
	if (ix == QRYWDBEPRSADETAIL) return("QryWdbePrsADetail");
	if (ix == QRYWDBEPRSLIST) return("QryWdbePrsList");
	if (ix == QRYWDBEPRSMNCOREPROJECT) return("QryWdbePrsMNCoreproject");
	if (ix == QRYWDBEPRSMNPROJECT) return("QryWdbePrsMNProject");
	if (ix == QRYWDBEPRTLIST) return("QryWdbePrtList");
	if (ix == QRYWDBEPRTSRC1NSENSITIVITY) return("QryWdbePrtSrc1NSensitivity");
	if (ix == QRYWDBERLSLIST) return("QryWdbeRlsList");
	if (ix == QRYWDBESEGLIST) return("QryWdbeSegList");
	if (ix == QRYWDBESEGSUP1NSEGMENT) return("QryWdbeSegSup1NSegment");
	if (ix == QRYWDBESIGLIST) return("QryWdbeSigList");
	if (ix == QRYWDBESIGSRC1NSENSITIVITY) return("QryWdbeSigSrc1NSensitivity");
	if (ix == QRYWDBESIL1NBANK) return("QryWdbeSil1NBank");
	if (ix == QRYWDBESIL1NINTERRUPT) return("QryWdbeSil1NInterrupt");
	if (ix == QRYWDBESIL1NPERIPHERAL) return("QryWdbeSil1NPeripheral");
	if (ix == QRYWDBESIL1NTARGET) return("QryWdbeSil1NTarget");
	if (ix == QRYWDBESILFWD1NCONTROLLER) return("QryWdbeSilFwd1NController");
	if (ix == QRYWDBESILHK1NMODULE) return("QryWdbeSilHk1NModule");
	if (ix == QRYWDBESILHK1NVECTOR) return("QryWdbeSilHk1NVector");
	if (ix == QRYWDBESILLIST) return("QryWdbeSilList");
	if (ix == QRYWDBESILREF1NCOMMAND) return("QryWdbeSilRef1NCommand");
	if (ix == QRYWDBESILREF1NERROR) return("QryWdbeSilRef1NError");
	if (ix == QRYWDBESILREF1NSIGNAL) return("QryWdbeSilRef1NSignal");
	if (ix == QRYWDBESILSIL1NUNIT) return("QryWdbeSilSil1NUnit");
	if (ix == QRYWDBESNSLIST) return("QryWdbeSnsList");
	if (ix == QRYWDBESYSHK1NVECTOR) return("QryWdbeSysHk1NVector");
	if (ix == QRYWDBESYSLIST) return("QryWdbeSysList");
	if (ix == QRYWDBESYSSYS1NTARGET) return("QryWdbeSysSys1NTarget");
	if (ix == QRYWDBETRGLIST) return("QryWdbeTrgList");
	if (ix == QRYWDBEUNT1NBANK) return("QryWdbeUnt1NBank");
	if (ix == QRYWDBEUNT1NINTERRUPT) return("QryWdbeUnt1NInterrupt");
	if (ix == QRYWDBEUNT1NPERIPHERAL) return("QryWdbeUnt1NPeripheral");
	if (ix == QRYWDBEUNT1NTARGET) return("QryWdbeUnt1NTarget");
	if (ix == QRYWDBEUNTFWD1NCONTROLLER) return("QryWdbeUntFwd1NController");
	if (ix == QRYWDBEUNTHK1NMODULE) return("QryWdbeUntHk1NModule");
	if (ix == QRYWDBEUNTHK1NVECTOR) return("QryWdbeUntHk1NVector");
	if (ix == QRYWDBEUNTLIST) return("QryWdbeUntList");
	if (ix == QRYWDBEUNTREF1NCOMMAND) return("QryWdbeUntRef1NCommand");
	if (ix == QRYWDBEUNTREF1NERROR) return("QryWdbeUntRef1NError");
	if (ix == QRYWDBEUNTREF1NSIGNAL) return("QryWdbeUntRef1NSignal");
	if (ix == QRYWDBEUNTSIL1NUNIT) return("QryWdbeUntSil1NUnit");
	if (ix == QRYWDBEUSGAACCESS) return("QryWdbeUsgAAccess");
	if (ix == QRYWDBEUSGLIST) return("QryWdbeUsgList");
	if (ix == QRYWDBEUSGMNUSER) return("QryWdbeUsgMNUser");
	if (ix == QRYWDBEUSR1NSESSION) return("QryWdbeUsr1NSession");
	if (ix == QRYWDBEUSRAACCESS) return("QryWdbeUsrAAccess");
	if (ix == QRYWDBEUSRLIST) return("QryWdbeUsrList");
	if (ix == QRYWDBEUSRMNUSERGROUP) return("QryWdbeUsrMNUsergroup");
	if (ix == QRYWDBEVARLIST) return("QryWdbeVarList");
	if (ix == QRYWDBEVECLIST) return("QryWdbeVecList");
	if (ix == QRYWDBEVECVEC1NVECTORITEM) return("QryWdbeVecVec1NVectoritem");
	if (ix == QRYWDBEVER1NRELEASE) return("QryWdbeVer1NRelease");
	if (ix == QRYWDBEVER1NSYSTEM) return("QryWdbeVer1NSystem");
	if (ix == QRYWDBEVER1NUNIT) return("QryWdbeVer1NUnit");
	if (ix == QRYWDBEVERBVR1NVERSION) return("QryWdbeVerBvr1NVersion");
	if (ix == QRYWDBEVERLIST) return("QryWdbeVerList");
	if (ix == QRYWDBEVERMNLIBRARY) return("QryWdbeVerMNLibrary");
	if (ix == QRYWDBEVERREF1NFILE) return("QryWdbeVerRef1NFile");
	if (ix == QRYWDBEVITLIST) return("QryWdbeVitList");
	if (ix == ROOTWDBE) return("RootWdbe");
	if (ix == SESSWDBE) return("SessWdbe");

	return("");
};
